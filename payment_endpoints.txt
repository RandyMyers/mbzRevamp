üéØ COMPLETE SUBSCRIPTION PAYMENT SYSTEM - ALL ENDPOINTS

Complete subscription and payment flow with all missing features implemented:

üîë PAYMENT GATEWAY PUBLIC KEY ENDPOINTS

Get Public Key for Payment Gateways:
GET /api/payment-gateways/flutterwave/public-key
GET /api/payment-gateways/paystack/public-key  
GET /api/payment-gateways/squad/public-key

Response:
{
  "publicKey": "FLWPUBK_TEST-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}

üÜï STEP 1: CREATE SUBSCRIPTION WITH PAYMENT (NEW)

POST /api/subscriptions/create

Body:
{
  "planId": "string",
  "billingCycle": "monthly|quarterly|yearly",
  "amount": "number",
  "currency": "USD|EUR|GBP|NGN|BTC|USDT",
  "paymentMethod": "flutterwave|paystack|squad|bank"
}

Response:
{
  "success": true,
  "message": "Subscription created successfully",
  "subscription": {
    "_id": "subscription_id",
    "status": "pending",
    "billingInterval": "monthly",
    "startDate": "2024-01-01T00:00:00.000Z",
    "endDate": "2024-02-01T00:00:00.000Z"
  },
  "payment": {
    "_id": "payment_id",
    "reference": "uuid-reference",
    "amount": 10.00,
    "currency": "USD",
    "status": "pending",
    "gateway": "flutterwave"
  }
}

üí≥ PAYMENT PROCESSING ENDPOINTS

1. Squad Payment Initiation:
POST /api/payments/initiate-squad

Body:
{
  "userId": "string",
  "planId": "string",
  "amount": "number",
  "billingCycle": "string",
  "currency": "string",
  "email": "string", 
  "name": "string"
}

2. Bank Transfer Payment:
POST /api/payments/initiate

Body:
{
  "userId": "string",
  "planId": "string",
  "gateway": "bank",
  "amount": "number",
  "currency": "string",
  "status": "manual_review",
  "screenshotUrl": "string"
}

3. Upload Payment Proof (Bank Transfer):
POST /api/payments/upload-proof

Body: multipart/form-data
- screenshot: File

üÜï PAYMENT VERIFICATION & WEBHOOKS (NEW)

4. Payment Verification (Manual):
POST /api/payments/verify

Body:
{
  "paymentId": "string",
  "paymentReference": "string",
  "gateway": "flutterwave|paystack|squad|bank",
  "gatewayResponse": {},
  "amount": "number"
}

5. Payment Webhooks (Automatic):
POST /api/payments/webhook/flutterwave
POST /api/payments/webhook/paystack  
POST /api/payments/webhook/squad

üìù COMPLETE PAYMENT FLOW SUMMARY

STEP 1: CREATE SUBSCRIPTION
1. Call: POST /api/subscriptions/create
2. Creates subscription (status: "pending") and payment (status: "pending")
3. Returns subscriptionId and paymentId

STEP 2: PROCESS PAYMENT
Flutterwave & Paystack:
1. Get public key: GET /api/payment-gateways/{gateway}/public-key
2. Process payment: Direct to gateway
3. Gateway sends webhook: POST /api/payments/webhook/{gateway}
4. Webhook updates payment to "success" and subscription to "active"

Squad:
1. Get public key: GET /api/payment-gateways/squad/public-key (optional)
2. Initiate payment: POST /api/payments/initiate-squad
3. Redirect to checkout: Use returned checkout_url
4. Gateway sends webhook: POST /api/payments/webhook/squad
5. Webhook updates payment to "success" and subscription to "active"

Bank Transfer:
1. Upload proof: POST /api/payments/upload-proof
2. Submit payment: POST /api/payments/initiate
3. Manual verification: POST /api/payments/verify
4. Updates payment to "success" and subscription to "active"

üîß ADDITIONAL PAYMENT MANAGEMENT ENDPOINTS

Payment CRUD (if needed):
POST /api/payment/create
GET /api/payment/user/{userId}
GET /api/payment/{paymentId}
PATCH /api/payment/update/status/{paymentId}
PATCH /api/payment/refund/{paymentId}
DELETE /api/payment/delete/{paymentId}

Gateway Management:
GET /api/payment-gateways/
GET /api/payment-gateways/{type}
POST /api/payment-gateways/
PUT /api/payment-gateways/{type}
DELETE /api/payment-gateways/{type}

‚ö†Ô∏è IMPORTANT NOTES:
- Flutterwave & Paystack: Only need public key, payment processed directly by gateway
- Squad: Requires backend initiation call to get checkout URL
- Bank Transfer: Requires file upload + payment initiation
- All endpoints expect JWT authentication in headers where needed
- Base URL: https://mbzrevamp.onrender.com/api (production) or http://localhost:8800/api (local)

üîß COMPLETE FRONTEND IMPLEMENTATION GUIDE:

STEP 1: CREATE SUBSCRIPTION FIRST (NEW)
Before processing payment, you MUST create the subscription:

```javascript
const createSubscription = async (planData) => {
  const response = await fetch('/api/subscriptions/create', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({
      planId: planData.planId,
      billingCycle: planData.billingCycle,
      amount: planData.amount,
      currency: planData.currency,
      paymentMethod: planData.paymentMethod
    })
  });
  
  const result = await response.json();
  // Store subscriptionId and paymentId for later use
  return result;
};
```

STEP 2: HARDCODE PAYMENT METHOD TYPES
The payment method types (flutterwave, paystack, squad) are HARDCODED in the frontend.
You need to create buttons/handlers for these 3 specific payment methods:

1. Create 3 payment method buttons:
   - "Pay with Flutterwave" ‚Üí calls handleFlutterwavePay()
   - "Pay with Paystack" ‚Üí calls handlePaystackHandler() 
   - "Pay with Squad" ‚Üí calls handleSquadPay()

2. Hardcode the gateway types in your handlers:
   const handleFlutterwavePay = () => {
     dispatch(getGatewayPublicKey('flutterwave')); // HARDCODED
   }
   const handlePaystackPay = () => {
     dispatch(getGatewayPublicKey('paystack')); // HARDCODED
   }
   const handleSquadPay = () => {
     dispatch(getGatewayPublicKey('squad')); // HARDCODED
   }

STEP 3: IMPLEMENT COMPLETE PAYMENT FLOW
For each payment method, follow this exact process:

FLUTTERWAVE FLOW:
1. Create subscription: POST /api/subscriptions/create
2. User clicks "Pay with Flutterwave"
3. Call: GET /api/payment-gateways/flutterwave/public-key
4. Get publicKey from response
5. Initialize Flutterwave payment with publicKey
6. On success: Gateway sends webhook ‚Üí subscription becomes active
7. Handle success/failure callback

PAYSTACK FLOW:
1. Create subscription: POST /api/subscriptions/create
2. User clicks "Pay with Paystack"
3. Call: GET /api/payment-gateways/paystack/public-key
4. Get publicKey from response
5. Initialize Paystack payment with publicKey (amount * 100)
6. On success: Gateway sends webhook ‚Üí subscription becomes active
7. Handle success/failure callback

SQUAD FLOW:
1. Create subscription: POST /api/subscriptions/create
2. User clicks "Pay with Squad"
3. Call: GET /api/payment-gateways/squad/public-key (optional)
3. Call: POST /api/payment-gateways/initiate-squad with payment data
4. Get checkout_url from response
5. Redirect user to checkout_url

BANK TRANSFER FLOW:
1. User uploads payment proof file
2. Call: POST /api/payments/upload-proof (multipart/form-data)
3. Get file URL from response
4. Call: POST /api/payments/initiate with payment data + file URL
5. Redirect to success page

STEP 3: REQUIRED DATA STRUCTURE
Your payment data should include:
{
  "userId": "string",
  "planId": "string", 
  "amount": "number",
  "currency": "string",
  "email": "string",
  "name": "string",
  "billingCycle": "string"
}

‚ö†Ô∏è CRITICAL: Do NOT try to fetch available payment methods dynamically.
The system is designed to be STATIC with these 3 hardcoded payment methods.
