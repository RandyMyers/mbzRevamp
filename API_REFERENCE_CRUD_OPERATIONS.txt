================================================================================
                    MBZTECH API REFERENCE - CRUD OPERATIONS
================================================================================

This document covers the CRUD (Create, Read, Update, Delete) operations for:
- Categories
- Customers  
- Orders
- Inventory/Products
- Email Management
- Email Templates
- Draft Emails
- Sent Emails

================================================================================
                                CATEGORIES API
================================================================================

BASE URL: /api/categories

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All category operations are automatically logged for security and compliance:
- Category creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE CATEGORY
   POST /api/categories
   
   Request Body:
   {
     "name": "string (required)",
     "description": "string (optional)",
     "image": {
       "src": "string (optional)",
       "alt": "string (optional)"
     },
     "parent": "ObjectId (optional)",
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)",
     "isActive": "boolean (default: true)",
     "menuOrder": "number (default: 0)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "slug": "string (auto-generated)",
       "description": "string",
       "image": {
         "src": "string",
         "alt": "string"
       },
       "parent": "ObjectId",
       "wooCommerceId": "number (null initially)",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "menuOrder": "number",
       "productCount": "number (default: 0)",
       "syncStatus": "string (synced|pending|failed)",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL CATEGORIES
   GET /api/categories
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - parent: ObjectId or "null" (optional)
   - isActive: boolean (optional)
   - sortBy: string (default: "name")
   - sortOrder: "asc" | "desc" (default: "asc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "name": "string",
         "slug": "string",
         "description": "string",
         "image": {
           "src": "string",
           "alt": "string"
         },
         "parent": {
           "_id": "ObjectId",
           "name": "string",
           "slug": "string"
         },
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "isActive": "boolean",
         "menuOrder": "number",
         "productCount": "number",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET CATEGORY BY ID
   GET /api/categories/:id
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "slug": "string",
       "description": "string",
       "image": {
         "src": "string",
         "alt": "string"
       },
       "parent": {
         "_id": "ObjectId",
         "name": "string",
         "slug": "string"
       },
       "wooCommerceId": "number",
       "storeId": {
         "_id": "ObjectId",
         "name": "string",
         "url": "string"
       },
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "menuOrder": "number",
       "productCount": "number",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE CATEGORY
   PUT /api/categories/:id
   
   Request Body: (all fields optional)
   {
     "name": "string",
     "description": "string",
     "image": {
       "src": "string",
       "alt": "string"
     },
     "parent": "ObjectId",
     "isActive": "boolean",
     "menuOrder": "number"
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated category object
     }
   }

5. DELETE CATEGORY
   DELETE /api/categories/:id
   
   Response:
   {
     "success": true,
     "message": "Category deleted successfully",
     "id": "ObjectId"
   }

6. GET CATEGORIES BY STORE
   GET /api/categories/store/:storeId
   
   Query Parameters:
   - tree: boolean (default: false) - Returns hierarchical tree structure
   
   Response:
   {
     "success": true,
     "data": [
       // Array of categories for the store
     ]
   }

7. SYNC CATEGORIES WITH WOOCOMMERCE
   POST /api/categories/sync/:storeId
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Category sync completed",
     "data": {
       "created": "number",
       "updated": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

================================================================================
                                CUSTOMERS API
================================================================================

BASE URL: /api/customers

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All customer operations are automatically logged for security and compliance:
- Customer creation, updates, and deletions are logged with full context
- Bulk operations (delete all customers by store) are logged with critical severity
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete), critical (bulk delete)
- Organization context is maintained for all audit entries

1. CREATE CUSTOMER
   POST /api/customers/create
   
   Request Body:
   {
     "email": "string (required)",
     "first_name": "string (required)",
     "last_name": "string (required)",
     "username": "string (optional)",
     "role": "string (default: 'customer')",
     "billing": {
       "first_name": "string",
       "last_name": "string",
       "company": "string",
       "address_1": "string",
       "address_2": "string",
       "city": "string",
       "state": "string",
       "postcode": "string",
       "country": "string",
       "email": "string",
       "phone": "string"
     },
     "shipping": {
       "first_name": "string",
       "last_name": "string",
       "company": "string",
       "address_1": "string",
       "address_2": "string",
       "city": "string",
       "state": "string",
       "postcode": "string",
       "country": "string"
     },
     "is_paying_customer": "boolean (default: false)",
     "avatar_url": "string (optional)",
     "meta_data": ["object (optional)"],
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "email": "string",
       "first_name": "string",
       "last_name": "string",
       "username": "string",
       "role": "string",
       "billing": "object",
       "shipping": "object",
       "is_paying_customer": "boolean",
       "avatar_url": "string",
       "meta_data": ["object"],
       "wooCommerceId": "number (null initially)",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL CUSTOMERS
   GET /api/customers/all
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - role: string (optional)
   - is_paying_customer: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "email": "string",
         "first_name": "string",
         "last_name": "string",
         "username": "string",
         "role": "string",
         "billing": "object",
         "shipping": "object",
         "is_paying_customer": "boolean",
         "avatar_url": "string",
         "meta_data": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET CUSTOMERS BY ORGANIZATION
   GET /api/customers/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - role: string (optional)
   - is_paying_customer: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "email": "string",
         "first_name": "string",
         "last_name": "string",
         "username": "string",
         "role": "string",
         "billing": "object",
         "shipping": "object",
         "is_paying_customer": "boolean",
         "avatar_url": "string",
         "meta_data": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

4. GET CUSTOMER BY ID
   GET /api/customers/:id
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "email": "string",
       "first_name": "string",
       "last_name": "string",
       "username": "string",
       "role": "string",
       "billing": "object",
       "shipping": "object",
       "is_paying_customer": "boolean",
       "avatar_url": "string",
       "meta_data": ["object"],
       "wooCommerceId": "number",
       "storeId": {
         "_id": "ObjectId",
         "name": "string",
         "url": "string"
       },
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. UPDATE CUSTOMER
   PATCH /api/customers/:id
   
   Request Body: (all fields optional)
   {
     "email": "string",
     "first_name": "string",
     "last_name": "string",
     "username": "string",
     "role": "string",
     "billing": "object",
     "shipping": "object",
     "is_paying_customer": "boolean",
     "avatar_url": "string",
     "meta_data": ["object"]
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated customer object
     }
   }

6. DELETE CUSTOMER
   DELETE /api/customers/:id
   
   Response:
   {
     "success": true,
     "message": "Customer deleted successfully",
     "id": "ObjectId"
   }

7. GET CUSTOMERS BY STORE
   GET /api/customers/store/:storeId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - role: string (optional)
   - is_paying_customer: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "email": "string",
         "first_name": "string",
         "last_name": "string",
         "username": "string",
         "role": "string",
         "billing": "object",
         "shipping": "object",
         "is_paying_customer": "boolean",
         "avatar_url": "string",
         "meta_data": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

8. DELETE ALL CUSTOMERS BY STORE
   DELETE /api/customers/store/:storeId
   
   Query Parameters:
   - syncToWooCommerce: boolean (optional, default: false) - Whether to sync deletion to WooCommerce
   
   Response:
   {
     "success": true,
     "message": "All customers for store deleted successfully",
     "deletedCount": "number",
     "wooCommerceSync": {
       "synced": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

9. SYNC CUSTOMERS WITH WOOCOMMERCE
   POST /api/customers/woocommerce/sync-customers/:storeId/:organizationId
   
   Request Body:
   {
     "userId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Customer synchronization started in the background"
   }

10. SYNC CUSTOMER TO WOOCOMMERCE
    POST /api/customers/woocommerce/sync/:customerId
    
    Response:
    {
      "success": true,
      "message": "Customer synced to WooCommerce successfully",
      "data": {
        "wooCommerceId": "number",
        "syncStatus": "string"
      }
    }

11. RETRY CUSTOMER WOOCOMMERCE SYNC
    POST /api/customers/woocommerce/retry-sync/:customerId
    
    Response:
    {
      "success": true,
      "message": "Customer WooCommerce sync retry initiated",
      "data": {
        "wooCommerceId": "number",
        "syncStatus": "string"
      }
    }

================================================================================
                                ORDERS API
================================================================================

BASE URL: /api/orders

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All order operations are automatically logged for security and compliance:
- Order creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE ORDER
   POST /api/orders/create
   
   Request Body:
   {
     "customer_id": "ObjectId (optional)",
     "status": "string (default: 'pending')",
     "currency": "string (default: 'USD')",
     "prices_include_tax": "boolean (default: false)",
     "discount_total": "string (default: '0')",
     "discount_tax": "string (default: '0')",
     "shipping_total": "string (default: '0')",
     "shipping_tax": "string (default: '0')",
     "cart_tax": "string (default: '0')",
     "total": "string (required)",
     "total_tax": "string (default: '0')",
     "customer_note": "string (optional)",
     "billing": "object (required)",
     "shipping": "object (optional)",
     "payment_method": "string (optional)",
     "payment_method_title": "string (optional)",
     "transaction_id": "string (optional)",
     "customer_ip_address": "string (optional)",
     "customer_user_agent": "string (optional)",
     "created_via": "string (default: 'rest-api')",
     "line_items": [
       {
         "product_id": "ObjectId (required)",
         "name": "string (required)",
         "quantity": "number (required)",
         "tax_class": "string (optional)",
         "subtotal": "string (required)",
         "subtotal_tax": "string (default: '0')",
         "total": "string (required)",
         "total_tax": "string (default: '0')",
         "meta_data": ["object (optional)"]
       }
     ],
     "shipping_lines": [
       {
         "method_title": "string (required)",
         "method_id": "string (required)",
         "total": "string (required)",
         "total_tax": "string (default: '0')",
         "meta_data": ["object (optional)"]
       }
     ],
     "meta_data": ["object (optional)"],
     "order_key": "string (optional)",
     "cart_hash": "string (optional)",
     "version": "string (default: '3.0.0')",
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "customer_id": "ObjectId",
       "status": "string",
       "currency": "string",
       "prices_include_tax": "boolean",
       "discount_total": "string",
       "discount_tax": "string",
       "shipping_total": "string",
       "shipping_tax": "string",
       "cart_tax": "string",
       "total": "string",
       "total_tax": "string",
       "customer_note": "string",
       "billing": "object",
       "shipping": "object",
       "payment_method": "string",
       "payment_method_title": "string",
       "transaction_id": "string",
       "customer_ip_address": "string",
       "customer_user_agent": "string",
       "created_via": "string",
       "line_items": ["object"],
       "shipping_lines": ["object"],
       "meta_data": ["object"],
       "order_key": "string",
       "cart_hash": "string",
       "version": "string",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL ORDERS
   GET /api/orders/all
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - status: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - sortBy: string (default: "date_created")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "line_items": ["object"],
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "date_created": "Date",
         "date_updated": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET ORDERS BY ORGANIZATION
   GET /api/orders/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - status: string (optional)
   - storeId: ObjectId (optional)
   - sortBy: string (default: "date_created")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "line_items": ["object"],
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "date_created": "Date",
         "date_updated": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

4. GET ORDERS BY STORE
   GET /api/orders/store/:storeId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - status: string (optional)
   - sortBy: string (default: "date_created")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "line_items": ["object"],
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "date_created": "Date",
         "date_updated": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

5. GET ORDER BY ID
   GET /api/orders/get/:orderId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "customer_id": "ObjectId",
       "status": "string",
       "currency": "string",
       "prices_include_tax": "boolean",
       "discount_total": "string",
       "discount_tax": "string",
       "shipping_total": "string",
       "shipping_tax": "string",
       "cart_tax": "string",
       "total": "string",
       "total_tax": "string",
       "customer_note": "string",
       "billing": "object",
       "shipping": "object",
       "payment_method": "string",
       "payment_method_title": "string",
       "transaction_id": "string",
       "customer_ip_address": "string",
       "customer_user_agent": "string",
       "created_via": "string",
       "line_items": ["object"],
       "shipping_lines": ["object"],
       "meta_data": ["object"],
       "order_key": "string",
       "cart_hash": "string",
       "version": "string",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "date_created": "Date",
       "date_updated": "Date"
     }
   }

6. GET RECENT ORDERS
   GET /api/orders/recent
   
   Query Parameters:
   - limit: number (default: 10) - Number of recent orders to return
   - organizationId: ObjectId (optional) - Filter by organization
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "line_items": ["object"],
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "date_created": "Date",
         "date_updated": "Date"
       }
     ]
   }

7. UPDATE ORDER
   PATCH /api/orders/update/:orderId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "currency": "string",
     "total": "string",
     "customer_note": "string",
     "billing": "object",
     "shipping": "object",
     "payment_method": "string",
     "payment_method_title": "string",
     "transaction_id": "string",
     "line_items": ["object"],
     "shipping_lines": ["object"],
     "meta_data": ["object"]
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated order object
     }
   }

8. DELETE ORDER
   DELETE /api/orders/delete/:orderId
   
   Response:
   {
     "success": true,
     "message": "Order deleted successfully",
     "id": "ObjectId"
   }

9. DELETE ALL ORDERS BY STORE
   DELETE /api/orders/store/:storeId
   
   Query Parameters:
   - syncToWooCommerce: boolean (optional, default: false) - Whether to sync deletion to WooCommerce
   
   Response:
   {
     "success": true,
     "message": "All orders for store deleted successfully",
     "deletedCount": "number",
     "wooCommerceSync": {
       "synced": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

10. SYNC ORDERS
    POST /api/orders/sync/:storeId/:organizationId
    
    Request Body:
    {
      "userId": "ObjectId (required)"
    }
    
    Response:
    {
      "success": true,
      "message": "Order synchronization started in the background"
    }

11. ANALYTICS - CROSS STORE PERFORMANCE
    GET /api/orders/analytics/cross-store/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "storePerformance": ["object"],
        "totalRevenue": "number",
        "totalOrders": "number",
        "currency": "string"
      }
    }

12. ANALYTICS - TEMPORAL ANALYTICS
    GET /api/orders/analytics/temporal/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "dailyTrends": ["object"],
        "monthlyTrends": ["object"],
        "hourlyDistribution": ["object"]
      }
    }

13. ANALYTICS - CUSTOMER ANALYTICS
    GET /api/orders/analytics/customers/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "customerSegments": ["object"],
        "repeatCustomers": "number",
        "newCustomers": "number",
        "averageOrderValue": "number"
      }
    }

14. ANALYTICS - PRODUCT PERFORMANCE
    GET /api/orders/analytics/products/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "topProducts": ["object"],
        "productCategories": ["object"],
        "lowStockProducts": ["object"]
      }
    }

15. ANALYTICS - FINANCIAL ANALYTICS
    GET /api/orders/analytics/financial/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "revenue": "number",
        "profit": "number",
        "taxes": "number",
        "shipping": "number",
        "discounts": "number"
      }
    }

16. ANALYTICS - OPERATIONAL METRICS
    GET /api/orders/analytics/operations/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    
    Response:
    {
      "success": true,
      "data": {
        "orderStatusDistribution": ["object"],
        "averageProcessingTime": "number",
        "fulfillmentRate": "number",
        "returnRate": "number"
      }
    }

17. ANALYTICS - GEOSPATIAL ANALYTICS
    GET /api/orders/analytics/geospatial/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    
    Response:
    {
      "success": true,
      "data": {
        "topCountries": ["object"],
        "topCities": ["object"],
        "regionalPerformance": ["object"]
      }
    }

18. ANALYTICS - STATUS DISTRIBUTION
    GET /api/orders/analytics/status/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    
    Response:
    {
      "success": true,
      "data": {
        "statusBreakdown": ["object"],
        "statusTrends": ["object"]
      }
    }

19. ANALYTICS - SALES FUNNEL
    GET /api/orders/analytics/funnel/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    
    Response:
    {
      "success": true,
      "data": {
        "funnelStages": ["object"],
        "conversionRates": ["object"],
        "dropoffPoints": ["object"]
      }
    }

20. ANALYTICS - CUSTOMER LTV
    GET /api/orders/analytics/ltv/:organizationId
    
    Query Parameters:
    - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
    - displayCurrency: string (optional)
    
    Response:
    {
      "success": true,
      "data": {
        "averageLTV": "number",
        "ltvSegments": ["object"],
        "ltvTrends": ["object"]
      }
    }

================================================================================
                                EMAIL MANAGEMENT API
================================================================================

BASE URL: /api/emails

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All email operations are automatically logged for security and compliance:
- Email creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE EMAIL
   POST /api/emails/create
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "recipient": "string (required, valid email format)",
     "subject": "string (required, max 200 characters)",
     "body": "string (required, HTML content)",
     "variables": "object (optional, key-value pairs)",
     "emailTemplate": "ObjectId (optional)",
     "organization": "ObjectId (required)",
     "user": "ObjectId (required)",
     "status": "string (default: 'drafts', options: drafts|sent|failed)",
     "sentAt": "Date (optional)"
   }
   
   Response:
   {
     "success": true,
     "email": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "string",
       "sentAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL EMAILS
   GET /api/emails/all
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional)
   - organizationId: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "emails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "user": {
           "_id": "ObjectId",
           "name": "string"
         },
         "status": "string",
         "sentAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

3. GET EMAIL BY ID
   GET /api/emails/get/:emailId
   
   Response:
   {
     "success": true,
     "email": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "string",
       "sentAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE EMAIL
   PATCH /api/emails/update/:emailId
   
   Request Body:
   {
     "recipient": "string (optional)",
     "subject": "string (optional)",
     "body": "string (optional)",
     "variables": "object (optional)",
     "emailTemplate": "ObjectId (optional)",
     "status": "string (optional)",
     "bounceReason": "string (optional)",
     "unsubscribed": "boolean (optional)",
     "replied": "boolean (optional)",
     "sentAt": "Date (optional)"
   }
   
   Response:
   {
     "success": true,
     "email": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "string",
       "sentAt": "Date",
       "updatedAt": "Date"
     }
   }

5. DELETE EMAIL
   DELETE /api/emails/delete/:emailId
   
   Response:
   {
     "success": true,
     "message": "Email deleted successfully"
   }

6. GET EMAILS BY STATUS
   GET /api/emails/status/:status
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - organizationId: ObjectId (optional)
   
   Response:
   {
     "success": true,
     "emails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "status": "string",
         "sentAt": "Date"
       }
     ]
   }

================================================================================
                                EMAIL ANALYTICS API
================================================================================

BASE URL: /api/emails/analytics

Authentication: All endpoints require authentication via authMiddleware

1. DELIVERY STATISTICS
   GET /api/emails/analytics/delivery-stats
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "string (status)",
         "count": "number"
       }
     ]
   }

2. DEVICE STATISTICS
   GET /api/emails/analytics/device-stats
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "string (device type)",
         "count": "number"
       }
     ]
   }

3. GEOGRAPHIC STATISTICS
   GET /api/emails/analytics/geo-stats
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "string (country)",
         "count": "number"
       }
     ]
   }

4. EMAIL PERFORMANCE METRICS
   GET /api/emails/analytics/performance
   
   Query Parameters:
   - organizationId: ObjectId (optional)
   - startDate: string (ISO date, optional)
   - endDate: string (ISO date, optional)
   
   Response:
   {
     "success": true,
     "data": {
       "totalEmails": "number",
       "deliveredEmails": "number",
       "bouncedEmails": "number",
       "openedEmails": "number",
       "clickedEmails": "number",
       "deliveryRate": "string (percentage)",
       "bounceRate": "string (percentage)",
       "openRate": "string (percentage)",
       "clickRate": "string (percentage)"
     }
   }

5. EMAIL ENGAGEMENT METRICS
   GET /api/emails/analytics/engagement
   
   Query Parameters:
   - organizationId: ObjectId (optional)
   - timeRange: "7d" | "30d" | "90d" (default: "30d")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "string (date)",
         "emailsSent": "number",
         "emailsOpened": "number",
         "emailsClicked": "number"
       }
     ]
   }

6. REAL-TIME EMAIL TRACKING
   GET /api/emails/analytics/real-time
   
   Query Parameters:
   - organizationId: ObjectId (optional)
   
   Response:
   {
     "success": true,
     "data": {
       "totalSent": "number",
       "delivered": "number",
       "opened": "number",
       "clicked": "number",
       "bounced": "number"
     }
   }

================================================================================
                                DRAFT EMAILS API
================================================================================

BASE URL: /api/drafts

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All draft email operations are automatically logged for security and compliance:
- Draft creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE DRAFT EMAIL
   POST /api/drafts
   
   Request Body:
   {
     "recipient": "string (required)",
     "subject": "string (required)",
     "body": "string (required)",
     "variables": "object (optional)",
     "emailTemplate": "ObjectId (optional)",
     "organization": "ObjectId (required)",
     "user": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "draft": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL DRAFT EMAILS
   GET /api/drafts
   
   Response:
   {
     "success": true,
     "drafts": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "user": {
           "_id": "ObjectId",
           "name": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

3. GET DRAFT EMAILS BY ORGANIZATION
   GET /api/drafts/organization/:organizationId
   
   Response:
   {
     "success": true,
     "drafts": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": "ObjectId",
         "organization": "ObjectId",
         "user": "ObjectId",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

4. GET DRAFT EMAIL BY ID
   GET /api/drafts/:draftId
   
   Response:
   {
     "success": true,
     "draft": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. UPDATE DRAFT EMAIL
   PATCH /api/drafts/:draftId
   
   Request Body:
   {
     "recipient": "string (optional)",
     "subject": "string (optional)",
     "body": "string (optional)",
     "variables": "object (optional)",
     "emailTemplate": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "draft": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "updatedAt": "Date"
     }
   }

6. DELETE DRAFT EMAIL
   DELETE /api/drafts/:draftId
   
   Response:
   {
     "success": true,
     "message": "Draft deleted successfully"
   }

7. SEND DRAFT EMAIL
   POST /api/drafts/:draftId/send
   
   Response:
   {
     "success": true,
     "email": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "sent",
       "sentAt": "Date"
     },
     "message": "Draft sent successfully"
   }

================================================================================
                                SENT EMAILS API
================================================================================

BASE URL: /api/sent

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All sent email operations are automatically logged for security and compliance:
- Sent email deletions and resends are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: warning (delete)
- Organization context is maintained for all audit entries

1. GET ALL SENT EMAILS
   GET /api/sent
   
   Response:
   {
     "success": true,
     "sentEmails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "user": {
           "_id": "ObjectId",
           "name": "string"
         },
         "status": "sent",
         "sentAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

2. GET SENT EMAILS BY ORGANIZATION
   GET /api/sent/organization/:organizationId
   
   Response:
   {
     "success": true,
     "sentEmails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": "ObjectId",
         "organization": "ObjectId",
         "user": "ObjectId",
         "status": "sent",
         "sentAt": "Date"
       }
     ]
   }

3. GET SENT EMAIL BY ID
   GET /api/sent/:sentEmailId
   
   Response:
   {
     "success": true,
     "sentEmail": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "sent",
       "sentAt": "Date"
     }
   }

4. DELETE SENT EMAIL
   DELETE /api/sent/:sentEmailId
   
   Response:
   {
     "success": true,
     "message": "Sent email deleted successfully"
   }

5. RESEND EMAIL
   POST /api/sent/:sentEmailId/resend
   
   Response:
   {
     "success": true,
     "email": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "status": "sent",
       "sentAt": "Date"
     },
     "message": "Email resent successfully"
   }

================================================================================
                                ARCHIVED EMAILS API
================================================================================

BASE URL: /api/archived

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All archived email operations are automatically logged for security and compliance:
- Archived email creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE ARCHIVED EMAIL
   POST /api/archived
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "recipient": "string (required)",
     "subject": "string (required)",
     "body": "string (required)",
     "variables": "object (optional)",
     "emailTemplate": "ObjectId (optional)",
     "organization": "ObjectId (required)",
     "user": "ObjectId (required)",
     "archivedAt": "Date (optional, default: current date)"
   }
   
   Response:
   {
     "success": true,
     "archivedEmail": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "archivedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL ARCHIVED EMAILS
   GET /api/archived
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - organizationId: ObjectId (optional)
   - search: string (optional)
   - sortBy: string (default: "archivedAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "archivedEmails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "user": {
           "_id": "ObjectId",
           "name": "string"
         },
         "archivedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET ARCHIVED EMAILS BY ORGANIZATION
   GET /api/archived/organization/:organizationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - sortBy: string (default: "archivedAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "archivedEmails": [
       {
         "_id": "ObjectId",
         "recipient": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "emailTemplate": "ObjectId",
         "organization": "ObjectId",
         "user": "ObjectId",
         "archivedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

4. GET ARCHIVED EMAIL BY ID
   GET /api/archived/:archivedEmailId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "archivedEmail": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "archivedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. UPDATE ARCHIVED EMAIL
   PATCH /api/archived/:archivedEmailId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "recipient": "string (optional)",
     "subject": "string (optional)",
     "body": "string (optional)",
     "variables": "object (optional)",
     "emailTemplate": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "archivedEmail": {
       "_id": "ObjectId",
       "recipient": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "emailTemplate": "ObjectId",
       "organization": "ObjectId",
       "user": "ObjectId",
       "archivedAt": "Date",
       "updatedAt": "Date"
     }
   }

6. DELETE ARCHIVED EMAIL
   DELETE /api/archived/:archivedEmailId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Archived email deleted successfully"
   }

================================================================================
                                EMAIL TEMPLATES API
================================================================================

BASE URL: /api/email/templates

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All email template operations are automatically logged for security and compliance:
- Template creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE EMAIL TEMPLATE
   POST /api/email/templates/create
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "name": "string (required, max 100 characters, unique)",
     "subject": "string (required, max 200 characters)",
     "body": "string (required, HTML content)",
     "variables": "object (optional, key-value pairs for template variables)",
     "createdBy": "ObjectId (required)",
     "organization": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "emailTemplate": {
       "_id": "ObjectId",
       "name": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "createdBy": "ObjectId",
       "organization": "ObjectId",
       "isActive": "boolean",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL EMAIL TEMPLATES
   GET /api/email/templates/all
   
   Response:
   {
     "success": true,
     "emailTemplates": [
       {
         "_id": "ObjectId",
         "name": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "createdBy": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "isActive": "boolean",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

3. GET EMAIL TEMPLATE BY ID
   GET /api/email/templates/get/:emailTemplateId
   
   Response:
   {
     "success": true,
     "emailTemplate": {
       "_id": "ObjectId",
       "name": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "createdBy": "ObjectId",
       "organization": "ObjectId",
       "isActive": "boolean",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE EMAIL TEMPLATE
   PATCH /api/email/templates/update/:emailTemplateId
   
   Request Body:
   {
     "name": "string (optional)",
     "subject": "string (optional)",
     "body": "string (optional)",
     "variables": "object (optional)",
     "isActive": "boolean (optional)"
   }
   
   Response:
   {
     "success": true,
     "emailTemplate": {
       "_id": "ObjectId",
       "name": "string",
       "subject": "string",
       "body": "string",
       "variables": "object",
       "createdBy": "ObjectId",
       "organization": "ObjectId",
       "isActive": "boolean",
       "updatedAt": "Date"
     }
   }

5. DELETE EMAIL TEMPLATE
   DELETE /api/email/templates/delete/:emailTemplateId
   
   Response:
   {
     "success": true,
     "message": "Email template deleted successfully"
   }

6. GET EMAIL TEMPLATES BY ORGANIZATION
   GET /api/email/templates/organization/:organizationId
   
   Response:
   {
     "success": true,
     "emailTemplates": [
       {
         "_id": "ObjectId",
         "name": "string",
         "subject": "string",
         "body": "string",
         "variables": "object",
         "createdBy": "ObjectId",
         "organization": "ObjectId",
         "isActive": "boolean",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

================================================================================
                                INVENTORY/PRODUCTS API
================================================================================

BASE URL: /api/inventory

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All inventory operations are automatically logged for security and compliance:
- Product creation, updates, and deletions are logged with full context
- Bulk operations (delete all products by store) are logged with critical severity
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete), critical (bulk delete)
- Organization context is maintained for all audit entries

1. CREATE PRODUCT
   POST /api/inventory/create
   
   Request Body (multipart/form-data):
   {
     "storeId": "ObjectId (required)",
     "name": "string (required)",
     "slug": "string (required)",
     "type": "string (default: 'simple')",
     "status": "string (default: 'publish')",
     "featured": "boolean (default: false)",
     "catalog_visibility": "string (default: 'visible')",
     "description": "string (optional)",
     "short_description": "string (optional)",
     "sku": "string (required)",
     "price": "string (optional)",
     "regular_price": "string (required)",
     "sale_price": "string (optional)",
     "date_on_sale_from": "string (ISO date, optional)",
     "date_on_sale_to": "string (ISO date, optional)",
     "on_sale": "boolean (default: false)",
     "purchasable": "boolean (default: true)",
     "total_sales": "number (default: 0)",
     "virtual": "boolean (default: false)",
     "downloadable": "boolean (default: false)",
     "download_limit": "number (default: -1)",
     "download_expiry": "number (default: -1)",
     "external_url": "string (optional)",
     "button_text": "string (optional)",
     "tax_status": "string (default: 'taxable')",
     "tax_class": "string (optional)",
     "manage_stock": "boolean (default: false)",
     "stock_quantity": "number (optional)",
     "stock_status": "string (default: 'instock')",
     "backorders": "string (default: 'no')",
     "backorders_allowed": "boolean (default: false)",
     "backordered": "boolean (default: false)",
     "sold_individually": "boolean (default: false)",
     "weight": "string (optional)",
     "dimensions": {
       "length": "string (optional)",
       "width": "string (optional)",
       "height": "string (optional)"
     },
     "shipping_required": "boolean (default: true)",
     "shipping_taxable": "boolean (default: true)",
     "shipping_class": "string (optional)",
     "shipping_class_id": "number (default: 0)",
     "reviews_allowed": "boolean (default: true)",
     "average_rating": "string (default: '0.00')",
     "rating_count": "number (default: 0)",
     "related_ids": ["number (optional)"],
     "upsell_ids": ["number (optional)"],
     "cross_sell_ids": ["number (optional)"],
     "parent_id": "number (default: 0)",
     "purchase_note": "string (optional)",
     "categories": [
       {
         "id": "number (WooCommerce ID)",
         "name": "string",
         "slug": "string"
       }
     ],
     "tags": [
       {
         "name": "string"
       }
     ],
     "attributes": ["object (optional)"],
     "default_attributes": ["object (optional)"],
     "variations": ["object (optional)"],
     "grouped_products": ["number (optional)"],
     "menu_order": "number (default: 0)",
     "meta_data": ["object (optional)"],
     "syncToWooCommerce": "boolean (default: false)",
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (required)",
     "images": "File[] (optional) - Multiple image files"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "storeId": "ObjectId",
       "name": "string",
       "slug": "string",
       "type": "string",
       "status": "string",
       "featured": "boolean",
       "catalog_visibility": "string",
       "description": "string",
       "short_description": "string",
       "sku": "string",
       "price": "string",
       "regular_price": "string",
       "sale_price": "string",
       "date_on_sale_from": "string",
       "date_on_sale_to": "string",
       "on_sale": "boolean",
       "purchasable": "boolean",
       "total_sales": "number",
       "virtual": "boolean",
       "downloadable": "boolean",
       "download_limit": "number",
       "download_expiry": "number",
       "external_url": "string",
       "button_text": "string",
       "tax_status": "string",
       "tax_class": "string",
       "manage_stock": "boolean",
       "stock_quantity": "number",
       "stock_status": "string",
       "backorders": "string",
       "backorders_allowed": "boolean",
       "backordered": "boolean",
       "sold_individually": "boolean",
       "weight": "string",
       "dimensions": "object",
       "shipping_required": "boolean",
       "shipping_taxable": "boolean",
       "shipping_class": "string",
       "shipping_class_id": "number",
       "reviews_allowed": "boolean",
       "average_rating": "string",
       "rating_count": "number",
       "related_ids": ["number"],
       "upsell_ids": ["number"],
       "cross_sell_ids": ["number"],
       "parent_id": "number",
       "purchase_note": "string",
       "categories": ["object"],
       "tags": ["object"],
       "images": [
         {
           "id": "number",
           "date_created": "string",
           "src": "string (Cloudinary URL)",
           "alt": "string"
         }
       ],
       "attributes": ["object"],
       "default_attributes": ["object"],
       "variations": ["object"],
       "grouped_products": ["number"],
       "menu_order": "number",
       "meta_data": ["object"],
       "wooCommerceId": "number (null initially)",
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL PRODUCTS
   GET /api/inventory/all
   
   Response:
   {
     "success": true,
     "products": [
       {
         "_id": "ObjectId",
         "storeId": "ObjectId",
         "name": "string",
         "slug": "string",
         "type": "string",
         "status": "string",
         "featured": "boolean",
         "sku": "string",
         "price": "string",
         "regular_price": "string",
         "sale_price": "string",
         "on_sale": "boolean",
         "manage_stock": "boolean",
         "stock_quantity": "number",
         "stock_status": "string",
         "weight": "string",
         "dimensions": "object",
         "categories": ["object"],
         "tags": ["object"],
         "images": ["object"],
         "wooCommerceId": "number",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

3. GET PRODUCTS BY ORGANIZATION
   GET /api/inventory/organization/:organizationId
   
   Response:
   {
     "success": true,
     "products": [
       {
         "_id": "ObjectId",
         "storeId": "ObjectId",
         "name": "string",
         "slug": "string",
         "type": "string",
         "status": "string",
         "featured": "boolean",
         "sku": "string",
         "price": "string",
         "regular_price": "string",
         "sale_price": "string",
         "on_sale": "boolean",
         "manage_stock": "boolean",
         "stock_quantity": "number",
         "stock_status": "string",
         "weight": "string",
         "dimensions": "object",
         "categories": ["object"],
         "tags": ["object"],
         "images": ["object"],
         "wooCommerceId": "number",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

4. GET PRODUCT BY ID
   GET /api/inventory/:productId
   
   Response:
   {
     "success": true,
     "product": {
       // Product object with populated store information
     }
   }

5. UPDATE PRODUCT
   PATCH /api/inventory/:productId
   
   Request Body: (all fields optional, same structure as CREATE)
   
   Response:
   {
     "success": true,
     "product": {
       // Updated product object
     }
   }

6. DELETE PRODUCT
   DELETE /api/inventory/:productId
   
   Response:
   {
     "success": true,
     "message": "Product deleted successfully",
     "id": "ObjectId"
   }

7. DELETE ALL PRODUCTS BY STORE
   DELETE /api/inventory/store/:storeId
   
   Response:
   {
     "success": true,
     "message": "All products for store deleted successfully"
   }

8. SYNC PRODUCTS WITH WOOCOMMERCE
   POST /api/inventory/woocommerce/sync-products/:storeId/:organizationId
   
   Request Body:
   {
     "userId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Product synchronization started in the background"
   }

9. SYNC SINGLE PRODUCT TO WOOCOMMERCE
   POST /api/inventory/woocommerce/sync/:productId
   
   Response:
   {
     "success": true,
     "message": "Product sync completed"
   }

10. RETRY PRODUCT WOOCOMMERCE SYNC
    POST /api/inventory/woocommerce/retry-sync/:productId
    
    Response:
    {
      "success": true,
      "message": "Product sync retry completed"
    }

11. GET PRODUCT METRICS
    GET /api/inventory/metrics/:organizationId
    
    Query Parameters:
    - storeId: ObjectId (optional)
    - date_from: string (ISO date, optional)
    - date_to: string (ISO date, optional)
    
    Response:
    {
      "success": true,
      "data": {
        "totalProducts": "number",
        "activeProducts": "number",
        "draftProducts": "number",
        "featuredProducts": "number",
        "onSaleProducts": "number",
        "outOfStockProducts": "number",
        "lowStockProducts": "number",
        "totalCategories": "number",
        "totalTags": "number",
        "averagePrice": "number",
        "totalValue": "number",
        "syncStatus": {
          "synced": "number",
          "pending": "number",
          "failed": "number"
        }
      }
    }

12. INVENTORY METRICS ENDPOINTS
   
   All metrics endpoints require authentication and return count/value data for the specified organization.
   
   a) GET TOTAL PRODUCTS COUNT
      GET /api/inventory/metrics/total-products/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   b) GET IN-STOCK ITEMS COUNT
      GET /api/inventory/metrics/in-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   c) GET LOW-STOCK ITEMS COUNT
      GET /api/inventory/metrics/low-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   d) GET OUT-OF-STOCK ITEMS COUNT
      GET /api/inventory/metrics/out-of-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   e) GET CATEGORY COUNT
      GET /api/inventory/metrics/category-count/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   f) GET STORE COUNT
      GET /api/inventory/metrics/store-count/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   g) GET TOTAL INVENTORY VALUE
      GET /api/inventory/metrics/total-value/:organizationId
      
      Response:
      {
        "success": true,
        "totalValue": "number"
      }
   
   h) GET AVERAGE PRODUCT PRICE
      GET /api/inventory/metrics/avg-price/:organizationId
      
      Response:
      {
        "success": true,
        "avgPrice": "number"
      }
   
   i) GET ON-SALE PRODUCTS COUNT
      GET /api/inventory/metrics/on-sale/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   j) GET AVERAGE PRODUCT RATING
      GET /api/inventory/metrics/avg-rating/:organizationId
      
      Response:
      {
        "success": true,
        "avgRating": "number"
      }

================================================================================
                              STORE OVERVIEW API
================================================================================

BASE URL: /api/store-overview

Authentication: All endpoints require authentication via authMiddleware

1. GET STORE STATS
   GET /api/store-overview/stats/:organizationId
   
   Query Parameters:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": {
       "storeCount": { "current": number, "previous": 0, "growth": 0 },
       "activeStores": { "current": number, "previous": 0, "growth": 0 },
       "totalRevenue": { "current": number, "previous": 0, "growth": 0, "currency": string },
       "totalOrders": { "current": number, "previous": 0, "growth": 0 },
       "totalCustomers": { "current": number, "previous": 0, "growth": 0 },
       "totalProducts": { "current": number, "previous": 0, "growth": 0 }
     }
   }
   
   Note: This endpoint returns all-time statistics (no time-based filtering).
   Previous period and growth calculations are set to 0 as data represents all-time totals.

2. GET STORE ALERTS
   GET /api/store-overview/alerts/:organizationId
   
   Response:
   {
     "success": true,
     "data": [
       {
         "type": "string (sync_warning|sync_error|low_stock|inactive_store)",
         "severity": "string (low|medium|high)",
         "message": "string",
         "storeId": "ObjectId (optional)",
         "storeName": "string (optional)",
         "lastSyncDate": "Date (optional)",
         "productCount": "number (optional)",
         "products": ["object (optional)"],
         "errorCount": "number (optional)"
       }
     ]
   }

3. GET STORE PERFORMANCE COMPARISON (Time Series Line Chart Data)
   GET /api/store-overview/performance/:organizationId
   
   Query Parameters:
   - timeRange: string (7d, 30d, 90d, 12m, default: 30d) - Time range for performance data
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "date": "string (YYYY-MM-DD)",
         "Store Name 1": "number (sales amount)",
         "Store Name 2": "number (sales amount)",
         "Store Name 3": "number (sales amount)"
         // ... one property per store
       }
     ],
     "summary": {
       "totalStores": "number",
       "dateRange": {
         "start": "string (YYYY-MM-DD)",
         "end": "string (YYYY-MM-DD)"
       },
       "stores": [
         {
           "storeId": "ObjectId",
           "storeName": "string",
           "totalSales": "number (rounded to 2 decimal places)",
           "totalOrders": "number",
           "platformType": "string",
           "isActive": "boolean"
         }
       ],
       "currency": "string"
     }
   }

4. GET STORE REVENUE TRENDS
   GET /api/store-overview/revenue-trends/:organizationId
   
   Query Parameters:
   - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
   - userId: ObjectId (optional)
   - displayCurrency: string (optional)
   
   Response:
   {
     "success": true,
     "data": {
       "daily": [
         {
           "date": "string (YYYY-MM-DD)",
           "revenue": "number",
           "orders": "number"
         }
       ],
       "monthly": [
         {
           "month": "string (YYYY-MM)",
           "revenue": "number",
           "orders": "number"
         }
       ]
     }
   }

================================================================================
                              CURRENCY CONVERSION & EXCHANGE RATES
================================================================================

The application supports multi-currency operations with automatic currency conversion
using the Exchange Rate API (exchangerate-api.com).

1. EXCHANGE RATE API INTEGRATION
   
   The system automatically fetches and caches exchange rates from the Exchange Rate API.
   Rates are cached for 1 hour by default and updated via background cron jobs.
   
   Environment Variables Required:
   - EXCHANGE_RATE_API_KEY: Your API key from exchangerate-api.com
   - EXCHANGE_RATE_API_URL: API base URL (default: https://v6.exchangerate-api.com/v6)
   - EXCHANGE_RATE_CACHE_TTL: Cache duration in seconds (default: 3600)
   
2. CURRENCY CONVERSION IN STATS
   
   All revenue calculations automatically convert multi-currency orders to the user's
   preferred display currency using the following fallback chain:
   
   1. Organization-specific exchange rates (if configured)
   2. Global/system exchange rates (cached from API)
   3. Fresh API rates (if cache is expired)
   4. Fallback to expired cached rates (if API is unavailable)
   
3. SUPPORTED CURRENCIES
   
   The system supports all currencies available through the Exchange Rate API,
   including but not limited to: USD, EUR, GBP, JPY, CAD, AUD, CHF, CNY, etc.
   
4. CURRENCY PREFERENCES
   
   Users can set their preferred display currency, which is used for:
   - Revenue calculations in dashboard stats
   - Order totals display
   - Financial reporting
   - Store performance metrics
   - Analytics revenue calculations
   - Product performance metrics
   - Customer lifetime value calculations

================================================================================
                              ANALYTICS API UPDATES
================================================================================

The Analytics API has been enhanced to support multi-currency operations and provide
accurate revenue calculations across all analytics endpoints.

1. UPDATED ENDPOINTS WITH CURRENCY SUPPORT
   
   The following analytics endpoints now accept currency parameters:
   - GET /api/analytics/total-revenue
   - GET /api/analytics/average-order-value
   - GET /api/analytics/lifetime-value
   - GET /api/analytics/product-performance
   - GET /api/analytics/regional-sales
   - GET /api/advanced-analytics/sales/total-revenue
   - GET /api/advanced-analytics/sales/revenue-by-product
   - GET /api/advanced-analytics/products/best-sellers
   
2. NEW QUERY PARAMETERS
   
   All revenue-related analytics endpoints now accept:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
3. ENHANCED RESPONSE FORMAT
   
   Revenue-related analytics responses now include:
   - currency: string - The display currency used for calculations
   - currencyBreakdown: object - Breakdown of revenue by original currency
   - originalCurrency: string - Original currency of the data
   - convertedCurrency: string - Currency the data was converted to
   
4. CONSISTENT ORDER FILTERING
   
   All analytics endpoints now consistently exclude cancelled and refunded orders
   from revenue calculations while maintaining accurate order counts where appropriate.

================================================================================
                                USER MANAGEMENT API
================================================================================

This section covers the complete user management system including:
- Authentication (Login/Register/Password Management)
- User Management (CRUD Operations)
- Role Management (Permissions System)
- Group Management (User Groups)
- Invitation System (User Invitations)
- Profile Management (User Profiles)

BASE URL: /api/auth (Authentication) | /api/users (User Management) | /api/roles (Role Management) | /api/groups (Group Management) | /api/invitations (Invitation System)

Authentication: All endpoints require authentication via authMiddleware except login/register endpoints

AUDIT LOGGING: All user management operations are automatically logged for security and compliance:
- User creation, updates, deletions, and status changes are logged
- Authentication events (login success/failure) are logged
- Role and permission changes are tracked
- Invitation events are recorded
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete/status change), error (security events)

================================================================================
                                AUTHENTICATION API
================================================================================

BASE URL: /api/auth

1. SUPER ADMIN REGISTRATION
   POST /api/auth/register-super-admin
   
   Request Body:
   {
     "fullName": "string (required)",
     "email": "string (required, unique)",
     "password": "string (required, min: 6)",
     "username": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Super admin registered successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": "super-admin",
       "status": "active",
       "createdAt": "Date"
     },
     "token": "JWT_TOKEN"
   }

2. SUPER ADMIN LOGIN
   POST /api/auth/login-super-admin
   
   Request Body:
   {
     "email": "string (required)",
     "password": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Login successful",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": "super-admin",
       "status": "active",
       "lastLogin": "Date",
       "createdAt": "Date"
     },
     "token": "JWT_TOKEN"
   }

3. ORGANIZATION USER REGISTRATION
   POST /api/auth/register-organization-user
   
   Request Body:
   {
     "fullName": "string (required)",
     "email": "string (required, unique)",
     "password": "string (required, min: 6)",
     "username": "string (optional)",
     "organizationId": "ObjectId (required)",
     "role": "ObjectId (optional)",
     "department": "string (optional)",
     "organizationCode": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "User registered successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": "ObjectId",
       "organization": "ObjectId",
       "department": "string",
       "status": "active",
       "createdAt": "Date"
     },
     "token": "JWT_TOKEN"
   }

4. ORGANIZATION USER LOGIN
   POST /api/auth/login-organization-user
   
   Request Body:
   {
     "email": "string (required)",
     "password": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Login successful",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string",
         "permissions": "object"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "status": "active",
       "lastLogin": "Date",
       "createdAt": "Date"
     },
     "token": "JWT_TOKEN"
   }

5. AFFILIATE REGISTRATION
   POST /api/auth/register-affiliate
   
   Request Body:
   {
     "fullName": "string (required)",
     "email": "string (required, unique)",
     "password": "string (required, min: 6)",
     "username": "string (optional)",
     "trackingCode": "string (optional, auto-generated)",
     "commissionRate": "number (optional, default: 10)"
   }
   
   Response:
   {
     "success": true,
     "message": "Affiliate registered successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": "affiliate",
       "status": "active",
       "createdAt": "Date"
     },
     "affiliate": {
       "_id": "ObjectId",
       "trackingCode": "string",
       "commissionRate": "number",
       "status": "pending"
     },
     "token": "JWT_TOKEN"
   }

6. CHANGE PASSWORD
   POST /api/auth/change-password
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "currentPassword": "string (required)",
     "newPassword": "string (required, min: 6)"
   }
   
   Response:
   {
     "success": true,
     "message": "Password changed successfully"
   }

7. CHANGE SUPER ADMIN PASSWORD
   POST /api/auth/change-password-super-admin
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "currentPassword": "string (required)",
     "newPassword": "string (required, min: 6)"
   }
   
   Response:
   {
     "success": true,
     "message": "Password changed successfully"
   }

================================================================================
                                USERS API
================================================================================

BASE URL: /api/users

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All user operations are automatically logged for security and compliance:
- User creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE USER
   POST /api/users/create
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "fullName": "string (required)",
     "email": "string (required, unique)",
     "password": "string (required, min: 6)",
     "username": "string (optional)",
     "role": "ObjectId (required)",
     "organization": "ObjectId (required)",
     "department": "string (optional)",
     "groups": ["ObjectId (optional)"],
     "status": "string (optional, default: active)",
     "profilePicture": "file (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "User created successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string",
         "permissions": "object"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "groups": ["ObjectId"],
       "status": "active",
       "profilePicture": "string",
       "createdAt": "Date"
     }
   }

2. GET ALL USERS
   GET /api/users/all
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - role: ObjectId (optional)
   - department: string (optional)
   - status: string (optional)
   - organization: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "users": [
       {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string",
         "username": "string",
         "role": {
           "_id": "ObjectId",
           "name": "string",
           "permissions": "object"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "department": "string",
         "groups": [
           {
             "_id": "ObjectId",
             "name": "string"
           }
         ],
         "status": "active",
         "profilePicture": "string",
         "lastLogin": "Date",
         "createdAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalUsers": "number",
       "hasNextPage": "boolean",
       "hasPrevPage": "boolean"
     }
   }

3. GET USER BY ID
   GET /api/users/get/:userId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string",
         "permissions": "object"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "groups": [
         {
           "_id": "ObjectId",
           "name": "string",
           "description": "string"
         }
       ],
       "status": "active",
       "profilePicture": "string",
       "lastLogin": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE USER
   PATCH /api/users/update/:userId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "fullName": "string (optional)",
     "email": "string (optional)",
     "username": "string (optional)",
     "role": "ObjectId (optional)",
     "department": "string (optional)",
     "groups": ["ObjectId (optional)"],
     "status": "string (optional)",
     "profilePicture": "file (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "User updated successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "profilePicture": "string",
       "displayCurrency": "string",
       "updatedAt": "Date"
     }
   }

5. DELETE USER
   DELETE /api/users/delete/:userId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "User deleted successfully"
   }

6. UPDATE USER STATUS
   PATCH /api/users/change/:userId/status
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "status": "string (required, active|inactive)"
   }
   
   Response:
   {
     "success": true,
     "message": "User status updated successfully",
     "user": {
       "_id": "ObjectId",
       "status": "string",
       "updatedAt": "Date"
     }
   }

7. GET USERS BY ORGANIZATION
   GET /api/users/organization/:organizationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - role: ObjectId (optional)
   - department: string (optional)
   - status: string (optional)
   
   Response:
   {
     "success": true,
     "users": [
       {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string",
         "username": "string",
         "role": {
           "_id": "ObjectId",
           "name": "string",
           "permissions": "object"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "department": "string",
         "groups": [
           {
             "_id": "ObjectId",
             "name": "string"
           }
         ],
         "status": "active",
         "profilePicture": "string",
         "lastLogin": "Date",
         "createdAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalUsers": "number",
       "hasNextPage": "boolean",
       "hasPrevPage": "boolean"
     }
   }

8. UPDATE PROFILE PICTURE
   PATCH /api/users/:userId/profile-picture
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "profilePicture": "file (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Profile picture updated successfully",
     "user": {
       "_id": "ObjectId",
       "profilePicture": "string",
       "updatedAt": "Date"
     }
   }

9. GET USER REGIONAL SETTINGS
   GET /api/users/:userId/regional-settings
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "regionalSettings": {
       "timezone": "string",
       "dateFormat": "string",
       "timeFormat": "string",
       "currency": "string",
       "language": "string"
     }
   }

10. UPDATE USER REGIONAL SETTINGS
    PATCH /api/users/:userId/regional-settings
    
    Headers: Authorization: Bearer JWT_TOKEN
    
    Request Body:
    {
      "timezone": "string (optional)",
      "dateFormat": "string (optional)",
      "timeFormat": "string (optional)",
      "currency": "string (optional)",
      "language": "string (optional)"
    }
    
    Response:
    {
      "success": true,
      "message": "Regional settings updated successfully",
      "regionalSettings": {
        "timezone": "string",
        "dateFormat": "string",
        "timeFormat": "string",
        "currency": "string",
        "language": "string"
      }
    }

11. UPLOAD PROFILE PICTURE
    POST /api/users/:userId/avatar
    
    Headers: Authorization: Bearer JWT_TOKEN
    
    Request Body:
    {
      "avatar": "file (required)"
    }
    
    Response:
    {
      "success": true,
      "message": "Profile picture uploaded successfully",
      "user": {
        "_id": "ObjectId",
        "profilePicture": "string",
        "updatedAt": "Date"
      }
    }

12. REMOVE PROFILE PICTURE
    DELETE /api/users/:userId/avatar
    
    Headers: Authorization: Bearer JWT_TOKEN
    
    Response:
    {
      "success": true,
      "message": "Profile picture removed successfully",
      "user": {
        "_id": "ObjectId",
        "profilePicture": null,
        "updatedAt": "Date"
      }
    }

13. GET USER SESSIONS
    GET /api/users/:userId/sessions
    
    Headers: Authorization: Bearer JWT_TOKEN
    
    Response:
    {
      "success": true,
      "sessions": [
        {
          "_id": "ObjectId",
          "userId": "ObjectId",
          "deviceInfo": "string",
          "ipAddress": "string",
          "userAgent": "string",
          "isActive": "boolean",
          "lastActivity": "Date",
          "createdAt": "Date"
        }
      ]
    }

14. TERMINATE USER SESSION
    DELETE /api/users/:userId/sessions/:sessionId
    
    Headers: Authorization: Bearer JWT_TOKEN
    
    Response:
    {
      "success": true,
      "message": "Session terminated successfully"
    }

ERROR HANDLING:
- 400: Invalid request data
- 401: Unauthorized access
- 403: Insufficient permissions
- 404: User not found
- 409: Email already exists
- 500: Internal server error

================================================================================
                                ROLE MANAGEMENT API
================================================================================

BASE URL: /api/roles

1. CREATE ROLE
   POST /api/roles
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "name": "string (required, unique)",
     "description": "string (optional)",
     "permissions": {
       "dashboard": { "view": true, "edit": false },
       "users": { "view": true, "create": false, "edit": false, "delete": false },
       "products": { "view": true, "create": true, "edit": true, "delete": false },
       "orders": { "view": true, "create": false, "edit": false, "delete": false },
       "analytics": { "view": true, "export": false },
       "settings": { "view": false, "edit": false }
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Role created successfully",
     "role": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "permissions": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL ROLES
   GET /api/roles
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - sortBy: string (default: "name")
   - sortOrder: "asc" | "desc" (default: "asc")
   
   Response:
   {
     "success": true,
     "roles": [
       {
         "_id": "ObjectId",
         "name": "string",
         "description": "string",
         "permissions": "object",
         "userCount": "number",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalRoles": "number"
     }
   }

3. GET ROLE BY ID
   GET /api/roles/:roleId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "role": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "permissions": "object",
       "userCount": "number",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE ROLE
   PATCH /api/roles/:roleId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "name": "string (optional)",
     "description": "string (optional)",
     "permissions": "object (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Role updated successfully",
     "role": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "permissions": "object",
       "updatedAt": "Date"
     }
   }

5. DELETE ROLE
   DELETE /api/roles/:roleId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Role deleted successfully"
   }

================================================================================
                                GROUP MANAGEMENT API
================================================================================

BASE URL: /api/groups

1. CREATE GROUP
   POST /api/groups
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "name": "string (required, unique)",
     "description": "string (optional)",
     "members": ["ObjectId (optional)"],
     "organization": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Group created successfully",
     "group": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "members": ["ObjectId"],
       "organization": "ObjectId",
       "memberCount": "number",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL GROUPS
   GET /api/groups
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - organization: ObjectId (optional)
   - sortBy: string (default: "name")
   - sortOrder: "asc" | "desc" (default: "asc")
   
   Response:
   {
     "success": true,
     "groups": [
       {
         "_id": "ObjectId",
         "name": "string",
         "description": "string",
         "members": [
           {
             "_id": "ObjectId",
             "fullName": "string",
             "email": "string"
           }
         ],
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "memberCount": "number",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalGroups": "number"
     }
   }

3. GET GROUP BY ID
   GET /api/groups/:groupId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "group": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "members": [
         {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string",
           "role": {
             "_id": "ObjectId",
             "name": "string"
           }
         }
       ],
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "memberCount": "number",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE GROUP
   PATCH /api/groups/:groupId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "name": "string (optional)",
     "description": "string (optional)",
     "members": ["ObjectId (optional)"]
   }
   
   Response:
   {
     "success": true,
     "message": "Group updated successfully",
     "group": {
       "_id": "ObjectId",
       "name": "string",
       "description": "string",
       "members": ["ObjectId"],
       "memberCount": "number",
       "updatedAt": "Date"
     }
   }

5. DELETE GROUP
   DELETE /api/groups/:groupId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Group deleted successfully"
   }

6. ADD MEMBER TO GROUP
   POST /api/groups/:groupId/members
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "userId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Member added to group successfully",
     "group": {
       "_id": "ObjectId",
       "memberCount": "number"
     }
   }

7. REMOVE MEMBER FROM GROUP
   DELETE /api/groups/:groupId/members/:userId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Member removed from group successfully",
     "group": {
       "_id": "ObjectId",
       "memberCount": "number"
     }
   }

================================================================================
                                INVITATION SYSTEM API
================================================================================

BASE URL: /api/invitations

1. CREATE INVITATION
   POST /api/invitations
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "email": "string (required)",
     "role": "ObjectId (required)",
     "organization": "ObjectId (required)",
     "department": "string (optional)",
     "groups": ["ObjectId (optional)"],
     "message": "string (optional)",
     "expiresAt": "Date (optional, default: 7 days)"
   }
   
   Response:
   {
     "success": true,
     "message": "Invitation sent successfully",
     "invitation": {
       "_id": "ObjectId",
       "email": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "groups": ["ObjectId"],
       "status": "pending",
       "token": "string",
       "expiresAt": "Date",
       "createdBy": "ObjectId",
       "createdAt": "Date"
     }
   }

2. GET ALL INVITATIONS
   GET /api/invitations
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, pending|accepted|expired)
   - organization: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "invitations": [
       {
         "_id": "ObjectId",
         "email": "string",
         "role": {
           "_id": "ObjectId",
           "name": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "department": "string",
         "groups": ["ObjectId"],
         "status": "pending",
         "expiresAt": "Date",
         "createdBy": {
           "_id": "ObjectId",
           "fullName": "string"
         },
         "createdAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalInvitations": "number"
     }
   }

3. GET INVITATION BY ID
   GET /api/invitations/:invitationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "invitation": {
       "_id": "ObjectId",
       "email": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string",
         "permissions": "object"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "groups": ["ObjectId"],
       "status": "pending",
       "token": "string",
       "expiresAt": "Date",
       "createdBy": {
         "_id": "ObjectId",
         "fullName": "string"
       },
       "createdAt": "Date"
     }
   }

4. ACCEPT INVITATION
   POST /api/invitations/:invitationId/accept
   
   Request Body:
   {
     "fullName": "string (required)",
     "password": "string (required, min: 6)",
     "username": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Invitation accepted successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": "ObjectId",
       "organization": "ObjectId",
       "department": "string",
       "groups": ["ObjectId"],
       "status": "active",
       "createdAt": "Date"
     },
     "token": "JWT_TOKEN"
   }

5. DECLINE INVITATION
   POST /api/invitations/:invitationId/decline
   
   Response:
   {
     "success": true,
     "message": "Invitation declined successfully"
   }

6. RESEND INVITATION
   POST /api/invitations/:invitationId/resend
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Invitation resent successfully",
     "invitation": {
       "_id": "ObjectId",
       "expiresAt": "Date"
     }
   }

7. DELETE INVITATION
   DELETE /api/invitations/:invitationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Invitation deleted successfully"
   }

================================================================================
                                PROFILE MANAGEMENT API
================================================================================

BASE URL: /api/users/profile

1. GET USER PROFILE
   GET /api/users/profile
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "role": {
         "_id": "ObjectId",
         "name": "string",
         "permissions": "object"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "department": "string",
       "groups": [
         {
           "_id": "ObjectId",
           "name": "string"
         }
       ],
       "status": "active",
       "profilePicture": "string",
       "displayCurrency": "string",
       "lastLogin": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. UPDATE USER PROFILE
   PATCH /api/users/profile
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Request Body:
   {
     "fullName": "string (optional)",
     "username": "string (optional)",
     "department": "string (optional)",
     "profilePicture": "file (optional)",
     "displayCurrency": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Profile updated successfully",
     "user": {
       "_id": "ObjectId",
       "fullName": "string",
       "email": "string",
       "username": "string",
       "profilePicture": "string",
       "displayCurrency": "string",
       "updatedAt": "Date"
     }
   }

3. UPLOAD PROFILE PICTURE
   POST /api/users/profile/picture
   
   Headers: Authorization: Bearer JWT_TOKEN
   Content-Type: multipart/form-data
   
   Request Body:
   {
     "profilePicture": "file (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Profile picture uploaded successfully",
     "profilePicture": "string (URL)"
   }

================================================================================
                                ROLE-BASED ACCESS CONTROL
================================================================================

The system implements comprehensive RBAC with the following features:

1. MIDDLEWARE PROTECTION:
   - protect: Verifies JWT authentication
   - restrictTo: Restricts routes to specific roles
   - isOwner: Checks resource ownership
   - isOrganizationMember: Verifies organization access
   - authorizeRoles: Alternative role checking
   - verifyOrganization: Organization-specific access

2. PERMISSION SYSTEM:
   - Granular permissions per role
   - Feature-level access control
   - Organization-based restrictions
   - Resource ownership validation

3. USER DEPARTMENTS:
   - Customer Support
   - IT
   - HR
   - Sales
   - Marketing
   - Finance
   - Billing
   - Shipping

4. USER STATUS:
   - active: Full access to assigned features
   - inactive: No access to any features

5. ORGANIZATION SCOPING:
   - Users can only access their organization's data
   - Super admins can access all organizations
   - Organization-specific invitations and groups

================================================================================
                                ERROR RESPONSES
================================================================================

All endpoints may return the following error responses:

1. Authentication Error (401):
   {
     "success": false,
     "message": "Access denied. No token provided."
   }

2. Validation Error (400):
   {
     "success": false,
     "message": "Validation failed",
     "errors": [
       {
         "field": "string",
         "message": "string"
       }
     ]
   }

3. Not Found Error (404):
   {
     "success": false,
     "message": "Resource not found"
   }

4. Server Error (500):
   {
     "success": false,
     "message": "Internal server error",
     "error": "string"
   }

================================================================================
                                NOTES
================================================================================

1. All timestamps are in ISO 8601 format
2. ObjectId fields are MongoDB ObjectId strings
3. File uploads use multipart/form-data
4. Images are automatically uploaded to Cloudinary
5. WooCommerce sync is optional and requires valid store credentials
6. Pagination is included in list endpoints
7. Search functionality supports text search across relevant fields
8. All endpoints require valid authentication token
9. Organization and store context is maintained throughout
10. Audit logging is automatically performed for all operations
11. Currency conversion is automatic for multi-currency orders
12. Store overview stats show all-time data (no time-based filtering)
13. Orders API returns all orders but stats exclude cancelled/refunded orders
14. Exchange Rate API integration provides real-time currency conversion
15. Background services automatically sync exchange rates

================================================================================
                                VERSION
================================================================================

API Version: 1.5
Last Updated: 2024
Documentation Version: 1.5

Recent Updates:
- Added Store Overview API with real-time analytics (Store Stats, Store Alerts, Store Performance Chart, Revenue Trend Chart)
- Implemented time-series line chart data for store performance comparison
- Enhanced delete by store functionality with optional WooCommerce sync for customers and orders
- Improved email management with better validation and error handling
- Added comprehensive archived emails API with full CRUD operations
- Enhanced email template management with improved validation
- Added authentication headers to all email endpoints
- Implemented better error messages and validation for email creation
- Added support for email variables as key-value pairs
- Enhanced audit logging for all email operations
- Updated store overview to show all-time statistics
- Added multi-currency support for store performance analytics
- Implemented comprehensive RBAC middleware for route and resource protection
- Added comprehensive audit logging system for security and compliance
- Enhanced audit tracking with IP address, user agent, and severity levels
- Implemented complete user management system with role-based access control
- Added comprehensive authentication system (super admin, organization users, affiliates)
- Implemented role management with granular permissions system
- Added group management for user organization and collaboration
- Implemented invitation system for secure user onboarding
- Added profile management with picture upload and currency preferences
- Enhanced security with organization-based access restrictions

================================================================================
                              USER REGIONAL SETTINGS & PROFILE MANAGEMENT
================================================================================

1. GET USER REGIONAL SETTINGS
   GET /api/users/:userId/regional-settings
   
   Response:
   {
     "success": true,
     "data": {
       "language": "en",
       "timezone": "UTC",
       "dateFormat": "MM/DD/YYYY",
       "timeFormat": "12",
       "organization": {
         "name": "My Company",
         "defaultCurrency": "USD"
       }
     }
   }

2. UPDATE USER REGIONAL SETTINGS
   PATCH /api/users/:userId/regional-settings
   
   Body:
   {
     "language": "es",
     "timezone": "EST",
     "dateFormat": "DD/MM/YYYY",
     "timeFormat": "24"
   }
   
   Response:
   {
     "success": true,
     "message": "Regional settings updated successfully",
     "data": {
       "language": "es",
       "timezone": "EST",
       "dateFormat": "DD/MM/YYYY",
       "timeFormat": "24"
     }
   }

3. UPLOAD PROFILE PICTURE
   POST /api/users/:userId/avatar
   
   Form Data:
   - profilePicture: File (image)
   
   Response:
   {
     "success": true,
     "message": "Profile picture uploaded successfully",
     "data": {
       "profilePicture": "https://res.cloudinary.com/...",
       "user": {
         "fullName": "John Doe",
         "email": "john@example.com"
       }
     }
   }

4. REMOVE PROFILE PICTURE
   DELETE /api/users/:userId/avatar
   
   Response:
   {
     "success": true,
     "message": "Profile picture removed successfully",
     "data": {
       "profilePicture": null,
       "user": {
         "fullName": "John Doe",
         "email": "john@example.com"
       }
     }
   }

5. GET USER SESSIONS
   GET /api/users/:userId/sessions
   
   Response:
   {
     "success": true,
     "data": {
       "sessions": [
         {
           "id": "current-session",
           "device": "Web Browser",
           "location": "Unknown",
           "ipAddress": "192.168.1.1",
           "lastActive": "2024-01-15T10:30:00Z",
           "isCurrent": true
         }
       ],
       "totalSessions": 1,
       "activeSessions": 1
     }
   }

6. TERMINATE USER SESSION
   DELETE /api/users/:userId/sessions/:sessionId
   
   Response:
   {
     "success": true,
     "message": "Session terminated successfully",
     "data": {
       "terminatedSessionId": "session-id"
     }
   }

================================================================================
                              VALIDATION RULES
================================================================================

Regional Settings Validation:
- language: Must be one of ['en', 'es', 'fr']
- timezone: Must be one of ['UTC', 'EST', 'PST', 'GMT', 'CET']
- dateFormat: Must be one of ['MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD']
- timeFormat: Must be one of ['12', '24']

Profile Picture Validation:
- File must be an image (jpg, png, gif, webp)
- Maximum file size: 5MB
- Automatic resizing to 300x300px
- Cloudinary optimization applied

================================================================================ 
================================================================================ 

================================================================================
                              NOTIFICATIONS API
================================================================================

BASE URL: /api/notifications

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All notification operations are automatically logged for security and compliance:
- Notification creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE NOTIFICATION
   POST /api/notifications
   
   Request Body:
   {
     "user": "ObjectId (required)",
     "template": "ObjectId (optional)",
     "subject": "string (required)",
     "body": "string (required)",
     "type": "email|system (default: system)",
     "status": "pending|sent|failed|read (default: pending)",
     "organization": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification created successfully",
     "data": {
       "_id": "ObjectId",
       "user": "ObjectId",
       "template": "ObjectId",
       "subject": "string",
       "body": "string",
       "status": "string",
       "type": "string",
       "deliveryAttemptCount": "number",
       "deliveryStatus": "success|failure",
       "sentAt": "Date",
       "errorMessage": "string",
       "organization": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL NOTIFICATIONS
   GET /api/notifications
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional)
   - type: string (optional)
   - user: ObjectId (optional)
   - organization: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "user": {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string",
           "username": "string"
         },
         "template": {
           "_id": "ObjectId",
           "templateName": "string",
           "subject": "string"
         },
         "subject": "string",
         "body": "string",
         "status": "string",
         "type": "string",
         "deliveryAttemptCount": "number",
         "deliveryStatus": "string",
         "sentAt": "Date",
         "errorMessage": "string",
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 100,
       "pages": 10
     }
   }

3. GET NOTIFICATION STATISTICS
   GET /api/notifications/stats
   
   Query Parameters:
   - organization: ObjectId (optional)
   
   Response:
   {
     "success": true,
     "data": {
       "total": 100,
       "pending": 5,
       "sent": 80,
       "read": 10,
       "failed": 5,
       "email": 60,
       "system": 40
     }
   }

4. GET NOTIFICATION BY ID
   GET /api/notifications/:notificationId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "user": {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string",
         "username": "string"
       },
       "template": {
         "_id": "ObjectId",
         "templateName": "string",
         "subject": "string",
         "body": "string"
       },
       "subject": "string",
       "body": "string",
       "status": "string",
       "type": "string",
       "deliveryAttemptCount": "number",
       "deliveryStatus": "string",
       "sentAt": "Date",
       "errorMessage": "string",
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. UPDATE NOTIFICATION
   PATCH /api/notifications/:notificationId
   
   Request Body:
   {
     "subject": "string (optional)",
     "body": "string (optional)",
     "status": "pending|sent|failed|read (optional)",
     "deliveryStatus": "success|failure (optional)",
     "errorMessage": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification updated successfully",
     "data": {
       "_id": "ObjectId",
       "subject": "string",
       "body": "string",
       "status": "string",
       "deliveryStatus": "string",
       "errorMessage": "string",
       "sentAt": "Date",
       "updatedAt": "Date"
     }
   }

6. DELETE NOTIFICATION
   DELETE /api/notifications/:notificationId
   
   Response:
   {
     "success": true,
     "message": "Notification deleted successfully"
   }

7. MARK NOTIFICATION AS READ
   PATCH /api/notifications/:notificationId/read
   
   Response:
   {
     "success": true,
     "message": "Notification marked as read",
     "data": {
       "_id": "ObjectId",
       "status": "read",
       "updatedAt": "Date"
     }
   }

8. GET USER NOTIFICATIONS
   GET /api/notifications/user/:userId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional)
   - type: string (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "template": {
           "_id": "ObjectId",
           "templateName": "string",
           "subject": "string"
         },
         "subject": "string",
         "body": "string",
         "status": "string",
         "type": "string",
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 50,
       "pages": 5
     },
     "unreadCount": 5
   }

9. MARK ALL USER NOTIFICATIONS AS READ
   PATCH /api/notifications/user/:userId/read-all
   
   Response:
   {
     "success": true,
     "message": "All notifications marked as read",
     "data": {
       "updatedCount": 10
     }
   }

================================================================================
                           NOTIFICATION TEMPLATES API
================================================================================

BASE URL: /api/notification-templates

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All template operations are automatically logged for security and compliance:
- Template creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE NOTIFICATION TEMPLATE
   POST /api/notification-templates
   
   Request Body:
   {
     "templateName": "string (required)",
     "subject": "string (required)",
     "body": "string (required)",
     "type": "email|system (default: system)",
     "triggerEvent": "subscriptionEnd|reminder|invoiceCreated|accountUpdate|custom (default: custom)",
     "variables": {
       "userName": "string",
       "orderNumber": "string"
     },
     "isActive": "boolean (default: true)",
     "organization": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification template created successfully",
     "data": {
       "_id": "ObjectId",
       "templateName": "string",
       "subject": "string",
       "body": "string",
       "type": "string",
       "triggerEvent": "string",
       "variables": "object",
       "isActive": "boolean",
       "createdBy": "ObjectId",
       "organization": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL NOTIFICATION TEMPLATES
   GET /api/notification-templates
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - type: string (optional)
   - triggerEvent: string (optional)
   - isActive: boolean (optional)
   - organization: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "templateName": "string",
         "subject": "string",
         "body": "string",
         "type": "string",
         "triggerEvent": "string",
         "variables": "object",
         "isActive": "boolean",
         "createdBy": {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string",
           "username": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 50,
       "pages": 5
     }
   }

3. GET ACTIVE NOTIFICATION TEMPLATES
   GET /api/notification-templates/active
   
   Query Parameters:
   - organization: ObjectId (optional)
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "templateName": "string",
         "subject": "string",
         "body": "string",
         "type": "string",
         "triggerEvent": "string",
         "variables": "object",
         "isActive": "boolean",
         "createdBy": {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string",
           "username": "string"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

4. GET NOTIFICATION TEMPLATE BY ID
   GET /api/notification-templates/:templateId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "templateName": "string",
       "subject": "string",
       "body": "string",
       "type": "string",
       "triggerEvent": "string",
       "variables": "object",
       "isActive": "boolean",
       "createdBy": {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string",
         "username": "string"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "string"
       },
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. UPDATE NOTIFICATION TEMPLATE
   PATCH /api/notification-templates/:templateId
   
   Request Body:
   {
     "templateName": "string (optional)",
     "subject": "string (optional)",
     "body": "string (optional)",
     "type": "email|system (optional)",
     "triggerEvent": "string (optional)",
     "variables": "object (optional)",
     "isActive": "boolean (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification template updated successfully",
     "data": {
       "_id": "ObjectId",
       "templateName": "string",
       "subject": "string",
       "body": "string",
       "type": "string",
       "triggerEvent": "string",
       "variables": "object",
       "isActive": "boolean",
       "updatedAt": "Date"
     }
   }

6. DELETE NOTIFICATION TEMPLATE
   DELETE /api/notification-templates/:templateId
   
   Response:
   {
     "success": true,
     "message": "Notification template deleted successfully"
   }

7. DUPLICATE NOTIFICATION TEMPLATE
   POST /api/notification-templates/:templateId/duplicate
   
   Request Body:
   {
     "newTemplateName": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification template duplicated successfully",
     "data": {
       "_id": "ObjectId",
       "templateName": "string",
       "subject": "string",
       "body": "string",
       "type": "string",
       "triggerEvent": "string",
       "variables": "object",
       "isActive": "boolean",
       "createdBy": "ObjectId",
       "organization": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

8. GET ORGANIZATION TEMPLATES
   GET /api/notification-templates/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - type: string (optional)
   - triggerEvent: string (optional)
   - isActive: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "templateName": "string",
         "subject": "string",
         "body": "string",
         "type": "string",
         "triggerEvent": "string",
         "variables": "object",
         "isActive": "boolean",
         "createdBy": {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string",
           "username": "string"
         },
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 30,
       "pages": 3
     }
   }

================================================================================
                           NOTIFICATION SETTINGS API
================================================================================

BASE URL: /api/notification-settings

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All settings operations are automatically logged for security and compliance:
- Settings updates are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (update)
- Organization context is maintained for all audit entries

1. GET USER NOTIFICATION SETTINGS
   GET /api/notification-settings/user/:userId
   
   Response:
   {
     "success": true,
     "data": {
       "userId": "ObjectId",
       "email": "string",
       "fullName": "string",
       "settings": {
         "email": {
           "enabled": "boolean",
           "categories": {
             "system": "boolean",
             "orders": "boolean",
             "inventory": "boolean",
             "customers": "boolean",
             "security": "boolean"
           }
         },
         "inApp": {
           "enabled": "boolean",
           "categories": {
             "system": "boolean",
             "orders": "boolean",
             "inventory": "boolean",
             "customers": "boolean",
             "security": "boolean"
           }
         },
         "frequency": "immediate|daily|weekly",
         "quietHours": {
           "enabled": "boolean",
           "start": "string (HH:MM)",
           "end": "string (HH:MM)",
           "timezone": "string"
         }
       }
     }
   }

2. UPDATE USER NOTIFICATION SETTINGS
   PATCH /api/notification-settings/user/:userId
   
   Request Body:
   {
     "email": {
       "enabled": "boolean",
       "categories": {
         "system": "boolean",
         "orders": "boolean",
         "inventory": "boolean",
         "customers": "boolean",
         "security": "boolean"
       }
     },
     "inApp": {
       "enabled": "boolean",
       "categories": {
         "system": "boolean",
         "orders": "boolean",
         "inventory": "boolean",
         "customers": "boolean",
         "security": "boolean"
       }
     },
     "frequency": "immediate|daily|weekly",
     "quietHours": {
       "enabled": "boolean",
       "start": "string (HH:MM)",
       "end": "string (HH:MM)",
       "timezone": "string"
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Notification settings updated successfully",
     "data": {
       "userId": "ObjectId",
       "settings": "object"
     }
   }

3. UPDATE NOTIFICATION CATEGORY
   PATCH /api/notification-settings/user/:userId/category
   
   Request Body:
   {
     "channel": "email|inApp (required)",
     "category": "system|orders|inventory|customers|security (required)",
     "enabled": "boolean (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Notification category updated successfully",
     "data": {
       "userId": "ObjectId",
       "channel": "string",
       "category": "string",
       "enabled": "boolean"
     }
   }

4. RESET USER NOTIFICATION SETTINGS
   POST /api/notification-settings/user/:userId/reset
   
   Response:
   {
     "success": true,
     "message": "Notification settings reset to defaults",
     "data": {
       "userId": "ObjectId",
       "settings": "object"
     }
   }

5. GET USERS NOTIFICATION SETTINGS
   GET /api/notification-settings/users
   
   Query Parameters:
   - organization: ObjectId (optional)
   - page: number (default: 1)
   - limit: number (default: 10)
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string",
         "notificationSettings": "object",
         "organization": {
           "_id": "ObjectId",
           "name": "string"
         }
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 50,
       "pages": 5
     }
   }

6. GET NOTIFICATION SETTINGS SUMMARY
   GET /api/notification-settings/summary
   
   Query Parameters:
   - organization: ObjectId (optional)
   
   Response:
   {
     "success": true,
     "data": {
       "totalUsers": 50,
       "emailEnabled": 45,
       "inAppEnabled": 48,
       "categoryStats": {
         "system": { "email": 40, "inApp": 45 },
         "orders": { "email": 35, "inApp": 42 },
         "inventory": { "email": 30, "inApp": 38 },
         "customers": { "email": 25, "inApp": 35 },
         "security": { "email": 20, "inApp": 30 }
       },
       "frequencyStats": {
         "immediate": 30,
         "daily": 15,
         "weekly": 5
       },
       "quietHoursEnabled": 10
     }
   }

================================================================================
                              VALIDATION RULES
================================================================================

Notification Validation:
- type: Must be 'email' or 'system'
- status: Must be 'pending', 'sent', 'failed', or 'read'
- deliveryStatus: Must be 'success' or 'failure'

Notification Template Validation:
- templateName: Required, must be unique within organization
- subject: Required
- body: Required
- type: Must be 'email' or 'system'
- triggerEvent: Must be 'subscriptionEnd', 'reminder', 'invoiceCreated', 'accountUpdate', or 'custom'

Notification Settings Validation:
- frequency: Must be 'immediate', 'daily', or 'weekly'
- quietHours: If enabled, start and end times are required
- channel: Must be 'email' or 'inApp'
- category: Must be 'system', 'orders', 'inventory', 'customers', or 'security'

================================================================================
                              OVERVIEW API
================================================================================

BASE URL: /api/overview

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All overview operations are automatically logged for security and compliance:
- Overview data access is logged with user context
- User information, IP address, and user agent are captured
- Severity levels: info (data access)
- Organization context is maintained for all audit entries

OPTIMIZATION: The overview statistics endpoint has been optimized to return only calculated statistics
and chart data, removing raw data arrays (allOrders, allCustomers, allProducts) to improve
performance and reduce payload size. Only aggregated statistics and chart-ready data are returned.

1. GET OVERVIEW STATISTICS
   GET /api/overview/stats/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency for conversion
   
   Response:
   {
     "success": true,
     "data": {
       "totalRevenue": "number",
       "totalOrders": "number",
       "totalCustomers": "number", 
       "averageOrderValue": "number",
       "currency": "string",
       "revenueBreakdown": "object",
       "salesTrend": "array",
       "orderSources": "array",
       "orderStatusDistribution": "array",
       "productCategoriesDistribution": "array",
       "stockStatusDistribution": "array",
       "topProducts": "array",
       "recentOrders": "array"
     }
   }

2. GET SALES TREND DATA
   GET /api/overview/sales-trend/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "month": "string (YYYY-MM)",
         "revenue": "number",
         "orders": "number"
       }
     ]
   }

3. GET ORDER SOURCES BREAKDOWN
   GET /api/overview/order-sources/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "source": "string (manual|checkout|rest-api|etc)",
         "count": "number",
         "percentage": "number",
         "revenue": "number"
       }
     ]
   }

4. GET TOP PRODUCTS
   GET /api/overview/top-products/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   - limit: number (optional, default: 10) - Number of top products to return
   
   Response:
   {
     "success": true,
     "data": [
       {
         "name": "string",
         "sales": "number",
         "revenue": "number",
         "image": "string (URL)",
         "product_Id": "string",
         "sku": "string",
         "price": "number"
       }
     ]
   }

5. GET RECENT ORDERS
   GET /api/overview/recent-orders/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   - limit: number (optional, default: 10) - Number of recent orders to return
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "orderNumber": "string",
         "total": "number",
         "status": "string (completed|processing|pending|cancelled)",
         "currency": "string",
         "convertedTotal": "number",
         "customer": {
           "firstName": "string",
           "lastName": "string", 
           "email": "string"
         },
         "date_created": "string (ISO date)",
         "line_items": "array"
       }
     ]
   }

6. GET PRODUCT CATEGORIES DISTRIBUTION
   GET /api/overview/product-categories/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "name": "string (category name)",
         "value": "number (product count)",
         "color": "string (hex color)",
         "percentage": "number",
         "revenue": "number"
       }
     ]
   }

7. GET STOCK STATUS DISTRIBUTION
   GET /api/overview/stock-status/:userId
   
   Query Parameters:
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "name": "string (In Stock|Low Stock|Out of Stock)",
         "value": "number (product count)",
         "color": "string (hex color)",
         "status": "string (in_stock|low_stock|out_of_stock)",
         "percentage": "number",
         "sales": "number"
       }
     ]
   }

8. TEST PRODUCT IMAGES (Debug Endpoint)
   GET /api/overview/test-product-images/:userId
   
   Description: Debug endpoint to test product image loading and display
   
   Response:
   {
     "success": true,
     "data": [
       {
         "product_Id": "string",
         "name": "string",
         "images": "array",
         "imageStatus": "string (valid|invalid|missing)"
       }
     ]
   }

================================================================================
                              VALIDATION RULES
================================================================================

================================================================================
                              TASKS API
================================================================================

BASE URL: /api/tasks

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All task operations are automatically logged for security and compliance:
- Task creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE TASK
   POST /api/tasks/create
   
   Request Body:
   {
     "title": "string (required)",
     "description": "string (optional)",
     "status": "string (default: 'pending')",
     "priority": "string (default: 'medium')",
     "dueDate": "Date (optional)",
     "assignedTo": "ObjectId (optional)",
     "tags": ["string (optional)"],
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "description": "string",
       "status": "string",
       "priority": "string",
       "dueDate": "Date",
       "assignedTo": "ObjectId",
       "tags": ["string"],
       "organizationId": "ObjectId",
       "createdBy": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET TASKS BY ORGANIZATION
   GET /api/tasks/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - status: string (optional)
   - priority: string (optional)
   - assignedTo: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "title": "string",
         "description": "string",
         "status": "string",
         "priority": "string",
         "dueDate": "Date",
         "assignedTo": {
           "_id": "ObjectId",
           "fullName": "string",
           "email": "string"
         },
         "tags": ["string"],
         "organizationId": "ObjectId",
         "createdBy": "ObjectId",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET TASK BY ID
   GET /api/tasks/get/:taskId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "description": "string",
       "status": "string",
       "priority": "string",
       "dueDate": "Date",
       "assignedTo": {
         "_id": "ObjectId",
         "fullName": "string",
         "email": "string"
       },
       "tags": ["string"],
       "organizationId": "ObjectId",
       "createdBy": "ObjectId",
       "subtasks": ["object"],
       "comments": ["object"],
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE TASK
   PATCH /api/tasks/update/:taskId
   
   Request Body: (all fields optional)
   {
     "title": "string",
     "description": "string",
     "status": "string",
     "priority": "string",
     "dueDate": "Date",
     "assignedTo": "ObjectId",
     "tags": ["string"]
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated task object
     }
   }

5. DELETE TASK
   DELETE /api/tasks/delete/:taskId
   
   Response:
   {
     "success": true,
     "message": "Task deleted successfully",
     "id": "ObjectId"
   }

6. UPDATE TASK STATUS
   PATCH /api/tasks/status/:taskId
   
   Request Body:
   {
     "status": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated task object
     }
   }

7. ADD SUBTASK
   POST /api/tasks/subtasks/create/:taskId
   
   Request Body:
   {
     "title": "string (required)",
     "description": "string (optional)",
     "completed": "boolean (default: false)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "description": "string",
       "completed": "boolean",
       "taskId": "ObjectId",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

8. UPDATE SUBTASK
   PATCH /api/tasks/:taskId/subtasks/update/:subtaskId
   
   Request Body: (all fields optional)
   {
     "title": "string",
     "description": "string",
     "completed": "boolean"
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated subtask object
     }
   }

9. DELETE SUBTASK
   DELETE /api/tasks/:taskId/subtasks/delete/:subtaskId
   
   Response:
   {
     "success": true,
     "message": "Subtask deleted successfully"
   }

10. ADD COMMENT
    POST /api/tasks/:taskId/comments
    
    Request Body:
    {
      "content": "string (required)",
      "userId": "ObjectId (required)"
    }
    
    Response:
    {
      "success": true,
      "data": {
        "_id": "ObjectId",
        "content": "string",
        "taskId": "ObjectId",
        "userId": "ObjectId",
        "createdAt": "Date",
        "updatedAt": "Date"
      }
    }

11. UPDATE COMMENT
    PATCH /api/tasks/:taskId/comments/:commentId
    
    Request Body:
    {
      "content": "string (required)"
    }
    
    Response:
    {
      "success": true,
      "data": {
        // Updated comment object
      }
    }

12. DELETE COMMENT
    DELETE /api/tasks/:taskId/comments/:commentId
    
    Response:
    {
      "success": true,
      "message": "Comment deleted successfully"
    }

13. GET TASKS BY USER
    GET /api/tasks/user/:userId
    
    Query Parameters:
    - page: number (default: 1)
    - limit: number (default: 10)
    - status: string (optional)
    - priority: string (optional)
    
    Response:
    {
      "success": true,
      "data": [
        {
          "_id": "ObjectId",
          "title": "string",
          "description": "string",
          "status": "string",
          "priority": "string",
          "dueDate": "Date",
          "tags": ["string"],
          "organizationId": "ObjectId",
          "createdAt": "Date",
          "updatedAt": "Date"
        }
      ],
      "pagination": {
        "page": "number",
        "limit": "number",
        "total": "number",
        "pages": "number"
      }
    }

================================================================================
                              STORES API
================================================================================

BASE URL: /api/stores

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All store operations are automatically logged for security and compliance:
- Store creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. CREATE STORE
   POST /api/stores/create
   
   Request Body:
   {
     "name": "string (required)",
     "url": "string (required)",
     "platformType": "string (required)",
     "apiKey": "string (required)",
     "secretKey": "string (required)",
     "description": "string (optional)",
     "websiteLogo": "string (optional)",
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "url": "string",
       "platformType": "string",
       "apiKey": "string",
       "secretKey": "string",
       "description": "string",
       "websiteLogo": "string",
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "lastSyncDate": "Date",
       "webhookSettings": "object",
       "syncSettings": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET STORES BY ORGANIZATION
   GET /api/stores/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - platformType: string (optional)
   - isActive: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "name": "string",
         "url": "string",
         "platformType": "string",
         "description": "string",
         "websiteLogo": "string",
         "organizationId": "ObjectId",
         "isActive": "boolean",
         "lastSyncDate": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET STORE BY ID
   GET /api/stores/get/:storeId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "url": "string",
       "platformType": "string",
       "apiKey": "string",
       "secretKey": "string",
       "description": "string",
       "websiteLogo": "string",
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "lastSyncDate": "Date",
       "webhookSettings": "object",
       "syncSettings": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE STORE
   PATCH /api/stores/update/:storeId
   
   Request Body: (all fields optional)
   {
     "name": "string",
     "url": "string",
     "platformType": "string",
     "apiKey": "string",
     "secretKey": "string",
     "description": "string",
     "websiteLogo": "string",
     "isActive": "boolean"
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated store object
     }
   }

5. DELETE STORE
   DELETE /api/stores/delete/:storeId
   
   Response:
   {
     "success": true,
     "message": "Store deleted successfully",
     "id": "ObjectId"
   }

6. SYNC STORE WITH WOOCOMMERCE
   PATCH /api/stores/sync/:storeId
   
   Response:
   {
     "success": true,
     "message": "Store sync initiated",
     "data": {
       "syncStatus": "string",
       "lastSyncDate": "Date"
     }
   }

7. CREATE STORE WEBHOOKS
   POST /api/stores/:storeId/webhooks
   
   Request Body:
   {
     "baseUrl": "string (required)",
     "secret": "string (required)",
     "topics": ["string (optional)"]
   }
   
   Response:
   {
     "success": true,
     "message": "Webhooks created successfully",
     "data": {
       "webhookSettings": "object"
     }
   }

8. GET STORE WEBHOOK STATUS
   GET /api/stores/:storeId/webhooks/status
   
   Response:
   {
     "success": true,
     "data": {
       "enabled": "boolean",
       "baseUrl": "string",
       "topics": ["string"],
       "lastDelivery": "Date",
       "deliveryCount": "number"
     }
   }

================================================================================
                              VALIDATION RULES
================================================================================

================================================================================
                              CURRENCY & USER PREFERENCES API
================================================================================

BASE URL: /api/user-preferences

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All currency preference operations are automatically logged for security and compliance:
- Currency preference changes are logged with user context
- User information, IP address, and user agent are captured
- Severity levels: info (preference updates)
- Organization context is maintained for all audit entries

CURRENCY SUPPORT:
- Comprehensive support for 161+ world currencies from currency.txt
- Popular currencies highlighted for quick selection
- Regional currency organization (Europe, Asia, Africa, Americas, Oceania)
- Automatic validation against supported currency list
- Default fallback to USD when no preference is set

1. GET USER PREFERENCES
   GET /api/user-preferences
   
   Query Parameters:
   - userId: ObjectId (required) - User ID
   - organizationId: ObjectId (optional) - Organization ID for context
   
   Response:
   {
     "success": true,
     "data": {
       "user": {
         "displayCurrency": "USD",
         "organization": {
           "_id": "ObjectId",
           "name": "string",
           "defaultCurrency": "USD",
           "analyticsCurrency": "EUR"
         }
       },
       "availableCurrencies": ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "FOK", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KID", "KMF", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLE", "SOS", "SRD", "SSP", "STN", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "ZWL"],
       "popularCurrencies": [
         {"code": "USD", "name": "United States Dollar"},
         {"code": "EUR", "name": "Euro"},
         {"code": "GBP", "name": "Pound Sterling"},
         {"code": "JPY", "name": "Japanese Yen"},
         {"code": "CAD", "name": "Canadian Dollar"},
         {"code": "AUD", "name": "Australian Dollar"},
         {"code": "CHF", "name": "Swiss Franc"},
         {"code": "CNY", "name": "Chinese Renminbi"},
         {"code": "NGN", "name": "Nigerian Naira"},
         {"code": "INR", "name": "Indian Rupee"},
         {"code": "BRL", "name": "Brazilian Real"},
         {"code": "MXN", "name": "Mexican Peso"},
         {"code": "KRW", "name": "South Korean Won"},
         {"code": "SGD", "name": "Singapore Dollar"},
         {"code": "HKD", "name": "Hong Kong Dollar"},
         {"code": "NZD", "name": "New Zealand Dollar"}
       ],
       "totalSupportedCurrencies": 196,
       "organizationSettings": {
         "defaultCurrency": "USD",
         "analyticsCurrency": "EUR"
       }
     }
   }

2. UPDATE DISPLAY CURRENCY
   PUT /api/user-preferences/display-currency
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "displayCurrency": "string (required) - Must be valid 3-letter currency code"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "displayCurrency": "EUR"
     }
   }

3. UPDATE ANALYTICS CURRENCY
   PUT /api/user-preferences/analytics-currency
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "analyticsCurrency": "string (required) - Must be valid 3-letter currency code"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "analyticsCurrency": "EUR",
       "defaultCurrency": "USD",
       "organizationName": "string"
     }
   }

4. GET CURRENCY CONVERSION PREVIEW
   GET /api/user-preferences/currency-conversion
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   - amount: number (required) - Amount to convert
   - fromCurrency: string (required) - Source currency code
   - toCurrency: string (required) - Target currency code
   
   Response:
   {
     "success": true,
     "data": {
       "originalAmount": 100,
       "originalCurrency": "USD",
       "convertedAmount": 85.50,
       "targetCurrency": "EUR",
       "exchangeRate": 0.855
     }
   }

5. GET CURRENCY STATISTICS
   GET /api/user-preferences/currency-stats
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "USD",
         "totalAmount": 50000,
         "orderCount": 150
       },
       {
         "_id": "EUR",
         "totalAmount": 42000,
         "orderCount": 120
       }
     ]
   }

6. GET AVAILABLE CURRENCIES
   GET /api/user-preferences/available-currencies
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   - region: string (optional) - Filter by region (Europe, Asia, Africa, Americas, Oceania)
   
   Response:
   {
     "success": true,
     "data": {
       "availableCurrencies": ["USD", "EUR", "GBP", "NGN", "CAD", "AUD", "JPY", "CHF", "CNY", "INR", "BRL", "MXN", "KRW", "SGD", "HKD", "NZD"],
       "popularCurrencies": [
         {"code": "USD", "name": "United States Dollar"},
         {"code": "EUR", "name": "Euro"},
         {"code": "GBP", "name": "Pound Sterling"}
       ],
       "regionalCurrencies": [
         {"code": "EUR", "name": "Euro"},
         {"code": "GBP", "name": "Pound Sterling"},
         {"code": "CHF", "name": "Swiss Franc"}
       ],
       "exchangeRateCurrencies": ["USD", "EUR", "GBP"],
       "orderCurrencies": ["USD", "EUR", "NGN"],
       "totalSupported": 196,
       "totalAvailable": 16
     }
   }

CURRENCY VALIDATION RULES:
- Currency codes must be 3 uppercase letters (e.g., USD, EUR, NGN)
- Must be from the supported currency list (161+ currencies)
- Default fallback to USD when no preference is set
- Automatic validation against comprehensive currency database

CURRENCY FALLBACK CHAIN:
1. User's preferred display currency
2. Organization's analytics currency
3. Organization's default currency
4. System default (USD)

REGIONAL CURRENCY SUPPORT:
- Europe: EUR, GBP, CHF, SEK, NOK, DKK, PLN, CZK, HUF, RON, BGN, HRK
- Asia: JPY, CNY, KRW, SGD, HKD, TWD, THB, MYR, IDR, PHP, INR, VND
- Africa: NGN, ZAR, EGP, KES, GHS, MAD, TND, UGX, TZS, ETB, DZD, SDG
- Americas: USD, CAD, BRL, MXN, ARS, CLP, COP, PEN, UYU, PYG, BOB, GTQ
- Oceania: AUD, NZD, FJD, PGK, WST, VUV, SBD, TOP, TVD, KID

ERROR HANDLING:
- 400: Invalid request data or currency code
- 401: Unauthorized access
- 404: User or organization not found
- 500: Internal server error

================================================================================
                              EXCHANGE RATE API
================================================================================

BASE URL: /api/exchange-rates

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All exchange rate operations are automatically logged for security and compliance:
- Exchange rate creation, updates, and deletions are logged with full context
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. GET ALL EXCHANGE RATES
   GET /api/exchange-rates
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   - baseCurrency: string (optional) - Filter by base currency
   - targetCurrency: string (optional) - Filter by target currency
   - isActive: boolean (optional) - Filter by active status
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "organizationId": "ObjectId",
         "baseCurrency": "USD",
         "targetCurrency": "EUR",
         "rate": 0.855,
         "isCustom": false,
         "isGlobal": false,
         "source": "api",
         "isActive": true,
         "lastApiUpdate": "Date",
         "cacheExpiry": "Date",
         "isExpired": false,
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

2. GET EXCHANGE RATE BY ID
   GET /api/exchange-rates/:id
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "baseCurrency": "USD",
       "targetCurrency": "EUR",
       "rate": 0.855,
       "isCustom": false,
       "isGlobal": false,
       "source": "api",
       "isActive": true,
       "lastApiUpdate": "Date",
       "cacheExpiry": "Date",
       "isExpired": false,
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

3. CREATE EXCHANGE RATE
   POST /api/exchange-rates
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "baseCurrency": "string (required) - 3-letter currency code",
     "targetCurrency": "string (required) - 3-letter currency code",
     "rate": "number (required) - Exchange rate value",
     "isCustom": "boolean (optional, default: false)",
     "source": "string (optional, default: 'user')"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "baseCurrency": "USD",
       "targetCurrency": "EUR",
       "rate": 0.855,
       "isCustom": false,
       "source": "user",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE EXCHANGE RATE
   PUT /api/exchange-rates/:id
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "rate": "number (optional) - New exchange rate value",
     "isActive": "boolean (optional) - Active status"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "baseCurrency": "USD",
       "targetCurrency": "EUR",
       "rate": 0.860,
       "isActive": true,
       "updatedAt": "Date"
     }
   }

5. DELETE EXCHANGE RATE
   DELETE /api/exchange-rates/:id
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   
   Response:
   {
     "success": true,
     "message": "Exchange rate deleted successfully"
   }

6. BULK CREATE EXCHANGE RATES
   POST /api/exchange-rates/bulk
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "rates": [
       {
         "baseCurrency": "USD",
         "targetCurrency": "EUR",
         "rate": 0.855,
         "isCustom": false,
         "source": "user"
       },
       {
         "baseCurrency": "USD",
         "targetCurrency": "GBP",
         "rate": 0.750,
         "isCustom": false,
         "source": "user"
       }
     ]
   }
   
   Response:
   {
     "success": true,
     "data": {
       "created": 2,
       "errors": []
     }
   }

7. CONVERT CURRENCY
   GET /api/exchange-rates/convert
   
   Query Parameters:
   - organizationId: ObjectId (required) - Organization ID
   - amount: number (required) - Amount to convert
   - fromCurrency: string (required) - Source currency code
   - toCurrency: string (required) - Target currency code
   
   Response:
   {
     "success": true,
     "data": {
       "originalAmount": 100,
       "originalCurrency": "USD",
       "convertedAmount": 85.50,
       "targetCurrency": "EUR"
     }
   }

8. IMPORT API RATES
   POST /api/exchange-rates/api/import
   
   Request Body:
   {
     "baseCurrency": "string (optional, default: 'USD')",
     "organizationId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "baseCurrency": "USD",
       "importedRates": 161,
       "lastUpdate": "Fri, 27 Mar 2020 00:00:00 +0000",
       "nextUpdate": "Sat, 28 Mar 2020 00:00:00 +0000",
       "rates": [...]
     }
   }

9. GET API QUOTA
   GET /api/exchange-rates/api/quota
   
   Response:
   {
     "success": true,
     "data": {
       "requestsRemaining": 25000,
       "planQuota": 30000,
       "usagePercentage": 83.33,
       "planType": "Pro"
     }
   }

10. GET SUPPORTED CURRENCIES
    GET /api/exchange-rates/api/currencies
    
    Response:
    {
      "success": true,
      "data": {
        "totalCurrencies": 161,
        "currencies": [
          ["AED", "UAE Dirham"],
          ["AFN", "Afghan Afghani"],
          ["ALL", "Albanian Lek"],
          ["AMD", "Armenian Dram"],
          ["ANG", "Netherlands Antillian Guilder"],
          ["AOA", "Angolan Kwanza"],
          ["ARS", "Argentine Peso"],
          ["AUD", "Australian Dollar"],
          ["AWG", "Aruban Florin"],
          ["AZN", "Azerbaijani Manat"]
        ]
      }
    }

11. TRIGGER MANUAL SYNC
    POST /api/exchange-rates/sync/manual
    
    Request Body:
    {
      "baseCurrency": "string (optional, default: 'USD')"
    }
    
    Response:
    {
      "success": true,
      "message": "Manual sync completed for USD",
      "data": {
        "baseCurrency": "USD",
        "timestamp": "Date"
      }
    }

12. GET SYNC STATUS
    GET /api/exchange-rates/sync/status
    
    Response:
    {
      "success": true,
      "data": {
        "isRunning": false,
        "lastSyncTime": "Date",
        "totalRates": 500,
        "expiredRates": 10,
        "quota": {
          "remaining": 25000,
          "total": 30000,
          "percentage": 83.33
        }
      }
    }

13. GET RATE HISTORY
    GET /api/exchange-rates/history
    
    Query Parameters:
    - baseCurrency: string (optional) - Filter by base currency
    - targetCurrency: string (optional) - Filter by target currency
    - organizationId: ObjectId (optional) - Organization ID
    - limit: number (optional, default: 50) - Number of records to return
    
    Response:
    {
      "success": true,
      "data": {
        "total": 50,
        "history": [
          {
            "baseCurrency": "USD",
            "targetCurrency": "EUR",
            "rate": 0.855,
            "source": "api",
            "isGlobal": true,
            "lastApiUpdate": "Date",
            "cacheExpiry": "Date",
            "isExpired": false
          }
        ]
      }
    }

14. OVERRIDE RATE MANUALLY
    POST /api/exchange-rates/override
    
    Request Body:
    {
      "baseCurrency": "string (required)",
      "targetCurrency": "string (required)",
      "rate": "number (required)",
      "organizationId": "ObjectId (optional)",
      "reason": "string (optional)"
    }
    
    Response:
    {
      "success": true,
      "data": {
        "_id": "ObjectId",
        "baseCurrency": "USD",
        "targetCurrency": "EUR",
        "rate": 0.860,
        "organizationId": "ObjectId",
        "isGlobal": false,
        "isCustom": true,
        "source": "manual_override",
        "overrideReason": "Manual adjustment",
        "createdAt": "Date",
        "updatedAt": "Date"
      },
      "message": "Rate overridden successfully"
    }

EXCHANGE RATE FEATURES:
- Real-time currency conversion using Exchange Rate API v6
- Automatic caching with configurable TTL (default: 1 hour)
- Organization-specific and global rate management
- Manual rate override capabilities
- Background sync service with daily updates
- API quota monitoring and management
- Comprehensive rate history tracking
- Support for 161+ world currencies

ERROR HANDLING:
- 400: Invalid request data or currency codes
- 401: Unauthorized access
- 404: Exchange rate not found
- 409: Exchange rate already exists
- 500: Internal server error or API service unavailable

================================================================================
                              INVITATION API
================================================================================

BASE URL: /api/invitations

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All invitation operations are automatically logged for security and compliance:
- Invitation creation, acceptance, and management are logged with user context
- User information, IP address, and user agent are captured
- Severity levels: info (invitation operations), error (email failures)
- Organization context is maintained for all audit entries

EMAIL INTEGRATION: All invitations automatically trigger email notifications:
- Professional HTML email templates with organization branding
- Fallback text-only versions for email clients
- Email delivery tracking and error logging
- Automatic resend functionality with new tokens

1. CREATE INVITATION
   POST /api/invitations
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Body:
   {
     "email": "user@example.com",
     "role": "ObjectId", // Optional - role ID
     "department": "Sales", // Optional - department name
     "groups": ["ObjectId1", "ObjectId2"], // Optional - group IDs
     "message": "Welcome to our team!", // Optional - personal message
     "expiresAt": "2024-12-31T23:59:59.000Z", // Optional - default 7 days
     "organization": "ObjectId", // Optional - uses user's organization if not provided
     "baseUrl": "https://app.mbztechnology.com" // Required - frontend base URL for invitation links
   }
   
   Response:
   {
     "success": true,
     "message": "Invitation sent successfully",
     "invitation": {
       "_id": "ObjectId",
       "email": "user@example.com",
       "role": "ObjectId",
       "department": "Sales",
       "groups": ["ObjectId1", "ObjectId2"],
       "status": "pending",
       "expiresAt": "2024-12-31T23:59:59.000Z",
       "invitedBy": {
         "_id": "ObjectId",
         "fullName": "John Doe",
         "email": "admin@company.com"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "Company Name"
       },
       "createdAt": "2024-01-01T00:00:00.000Z"
     }
   }

2. GET ALL INVITATIONS
   GET /api/invitations
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Query Parameters:
   - organizationId: Filter by organization (optional)
   - status: Filter by status (pending, accepted, cancelled, expired)
   - page: Page number for pagination
   - limit: Number of items per page
   
   Response:
   {
     "success": true,
     "invitations": [
       {
         "_id": "ObjectId",
         "email": "user@example.com",
         "status": "pending",
         "expiresAt": "2024-12-31T23:59:59.000Z",
         "invitedBy": {
           "_id": "ObjectId",
           "fullName": "John Doe"
         },
         "organization": {
           "_id": "ObjectId",
           "name": "Company Name"
         },
         "role": {
           "_id": "ObjectId",
           "name": "Manager"
         },
         "department": "Sales",
         "createdAt": "2024-01-01T00:00:00.000Z"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 10,
       "total": 25,
       "pages": 3
     }
   }

3. GET INVITATION BY ID
   GET /api/invitations/:invitationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "invitation": {
       "_id": "ObjectId",
       "email": "user@example.com",
       "status": "pending",
       "expiresAt": "2024-12-31T23:59:59.000Z",
       "invitedBy": {
         "_id": "ObjectId",
         "fullName": "John Doe",
         "email": "admin@company.com"
       },
       "organization": {
         "_id": "ObjectId",
         "name": "Company Name"
       },
       "role": {
         "_id": "ObjectId",
         "name": "Manager"
       },
       "department": "Sales",
       "groups": [
         {
           "_id": "ObjectId",
           "name": "Sales Team"
         }
       ],
       "message": "Welcome to our team!",
       "createdAt": "2024-01-01T00:00:00.000Z",
       "updatedAt": "2024-01-01T00:00:00.000Z"
     }
   }

4. RESEND INVITATION
   POST /api/invitations/:invitationId/resend
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Body:
   {
     "baseUrl": "https://app.mbztechnology.com" // Required - frontend base URL for invitation links
   }
   
   Response:
   {
     "success": true,
     "message": "Invitation resent successfully",
     "invitation": {
       "_id": "ObjectId",
       "email": "user@example.com",
       "status": "pending",
       "expiresAt": "2024-12-31T23:59:59.000Z",
       "updatedAt": "2024-01-01T00:00:00.000Z"
     }
   }

5. CANCEL INVITATION
   PATCH /api/invitations/:invitationId/cancel
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Invitation cancelled successfully",
     "invitation": {
       "_id": "ObjectId",
       "email": "user@example.com",
       "status": "cancelled",
       "updatedAt": "2024-01-01T00:00:00.000Z"
     }
   }

6. ACCEPT INVITATION
   POST /api/invitations/accept
   
   Body:
   {
     "token": "invitation_token_here",
     "fullName": "John Doe",
     "password": "securepassword123",
     "username": "johndoe" // Optional
   }
   
   Response:
   {
     "success": true,
     "message": "Invitation accepted successfully",
     "user": {
       "_id": "ObjectId",
       "email": "user@example.com",
       "fullName": "John Doe",
       "username": "johndoe",
       "role": "ObjectId",
       "department": "Sales",
       "organization": "ObjectId",
       "status": "active"
     },
     "token": "JWT_TOKEN_HERE",
     "invitation": {
       "_id": "ObjectId",
       "status": "accepted",
       "organization": {
         "_id": "ObjectId",
         "name": "Company Name"
       }
     }
   }

7. DELETE INVITATION
   DELETE /api/invitations/:invitationId
   
   Headers: Authorization: Bearer JWT_TOKEN
   
   Response:
   {
     "success": true,
     "message": "Invitation deleted successfully"
   }

VALIDATION RULES:
- Email must be valid format and not already registered
- Password must be at least 6 characters long
- Username must be unique if provided
- Role and groups must exist in the system
- Only admin and super-admin users can create/resend invitations
- Invitations expire after 7 days by default
- Cannot resend already accepted invitations
- Base URL is required for invitation links

ERROR RESPONSES:
- 400: Invalid email format, duplicate invitation, weak password
- 403: Unauthorized to send invitations
- 404: Invitation not found or expired
- 500: Server error with detailed message in development

EMAIL TEMPLATES:
- Professional HTML design with organization branding
- Includes invitation details, role, department, and expiration
- Personal message from inviter (optional)
- Clear call-to-action button and fallback link
- Mobile-responsive design

================================================================================
                                INVOICES & RECEIPTS API
================================================================================

BASE URL: /api/invoices | /api/receipts | /api/templates

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All invoice and receipt operations are automatically logged for security and compliance:
- Invoice/receipt creation, updates, and deletions are logged with full context
- PDF generation and email sending are tracked
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

================================================================================
                                INVOICES API
================================================================================

BASE URL: /api/invoices

1. CREATE INVOICE
   POST /api/invoices/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "customerId": "ObjectId (required)",
     "orderId": "ObjectId (optional)",
     "invoiceNumber": "string (optional, auto-generated if not provided)",
     "issueDate": "Date (required)",
     "dueDate": "Date (required)",
     "status": "string (default: 'draft', options: draft|sent|paid|overdue|cancelled)",
     "currency": "string (default: 'USD')",
     "subtotal": "number (required)",
     "taxAmount": "number (default: 0)",
     "discountAmount": "number (default: 0)",
     "totalAmount": "number (required)",
     "notes": "string (optional)",
     "terms": "string (optional)",
     "lineItems": [
       {
         "description": "string (required)",
         "quantity": "number (required)",
         "unitPrice": "number (required)",
         "total": "number (required)"
       }
     ],
     "billingAddress": {
       "name": "string (required)",
       "company": "string (optional)",
       "address": "string (required)",
       "city": "string (required)",
       "state": "string (required)",
       "postalCode": "string (required)",
       "country": "string (required)"
     },
     "shippingAddress": {
       "name": "string (optional)",
       "company": "string (optional)",
       "address": "string (optional)",
       "city": "string (optional)",
       "state": "string (optional)",
       "postalCode": "string (optional)",
       "country": "string (optional)"
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Invoice created successfully",
     "data": {
       "_id": "ObjectId",
       "invoiceNumber": "string",
       "organizationId": "ObjectId",
       "customerId": "ObjectId",
       "orderId": "ObjectId",
       "issueDate": "Date",
       "dueDate": "Date",
       "status": "string",
       "currency": "string",
       "subtotal": "number",
       "taxAmount": "number",
       "discountAmount": "number",
       "totalAmount": "number",
       "notes": "string",
       "terms": "string",
       "lineItems": ["object"],
       "billingAddress": "object",
       "shippingAddress": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL INVOICES
   GET /api/invoices/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, draft|sent|paid|overdue|cancelled)
   - startDate: string (ISO date, optional)
   - endDate: string (ISO date, optional)
   - customerId: ObjectId (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "invoiceNumber": "string",
         "customerId": {
           "firstName": "string",
           "lastName": "string",
           "email": "string"
         },
         "issueDate": "Date",
         "dueDate": "Date",
         "status": "string",
         "totalAmount": "number",
         "currency": "string",
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalInvoices": "number"
   }

3. GET INVOICE BY ID
   GET /api/invoices/get/:invoiceId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "invoiceNumber": "string",
       "organizationId": "ObjectId",
       "customerId": {
         "firstName": "string",
         "lastName": "string",
         "email": "string"
       },
       "orderId": "ObjectId",
       "issueDate": "Date",
       "dueDate": "Date",
       "status": "string",
       "currency": "string",
       "subtotal": "number",
       "taxAmount": "number",
       "discountAmount": "number",
       "totalAmount": "number",
       "notes": "string",
       "terms": "string",
       "lineItems": ["object"],
       "billingAddress": "object",
       "shippingAddress": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE INVOICE
   PATCH /api/invoices/update/:invoiceId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "paidDate": "Date",
     "paymentMethod": "string",
     "notes": "string"
   }
   
   Response:
   {
     "success": true,
     "message": "Invoice updated successfully",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "paidDate": "Date",
       "paymentMethod": "string",
       "notes": "string",
       "updatedAt": "Date"
     }
   }

5. DELETE INVOICE
   DELETE /api/invoices/delete/:invoiceId
   
   Response:
   {
     "success": true,
     "message": "Invoice deleted successfully"
   }

6. SEND INVOICE VIA EMAIL
   POST /api/invoices/:invoiceId/send
   
   Request Body:
   {
     "email": "string (required)",
     "subject": "string (optional)",
     "message": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Invoice sent successfully",
     "data": {
       "sentAt": "Date",
       "recipient": "string"
     }
   }

7. GENERATE INVOICE PDF
   GET /api/invoices/:invoiceId/pdf
   
   Response: PDF file download

8. BULK GENERATE INVOICES FROM ORDERS
   POST /api/invoices/bulk-generate
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "orderIds": ["ObjectId (required)"],
     "templateId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Invoices generated successfully",
     "data": {
       "generated": "number",
       "failed": "number",
       "invoices": [
         {
           "_id": "ObjectId",
           "invoiceNumber": "string",
           "orderId": "ObjectId"
         }
       ]
     }
   }

================================================================================
                                RECEIPTS API
================================================================================

BASE URL: /api/receipts

1. CREATE RECEIPT
   POST /api/receipts/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "customerId": "ObjectId (required)",
     "orderId": "ObjectId (optional)",
     "receiptNumber": "string (optional, auto-generated if not provided)",
     "paymentDate": "Date (required)",
     "paymentMethod": "string (required)",
     "transactionId": "string (optional)",
     "status": "string (default: 'completed', options: completed|pending|failed|refunded)",
     "currency": "string (default: 'USD')",
     "subtotal": "number (required)",
     "taxAmount": "number (default: 0)",
     "discountAmount": "number (default: 0)",
     "totalAmount": "number (required)",
     "refundAmount": "number (default: 0)",
     "notes": "string (optional)",
     "lineItems": [
       {
         "description": "string (required)",
         "quantity": "number (required)",
         "unitPrice": "number (required)",
         "total": "number (required)"
       }
     ],
     "billingAddress": {
       "name": "string (required)",
       "company": "string (optional)",
       "address": "string (required)",
       "city": "string (required)",
       "state": "string (required)",
       "postalCode": "string (required)",
       "country": "string (required)"
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Receipt created successfully",
     "data": {
       "_id": "ObjectId",
       "receiptNumber": "string",
       "organizationId": "ObjectId",
       "customerId": "ObjectId",
       "orderId": "ObjectId",
       "paymentDate": "Date",
       "paymentMethod": "string",
       "transactionId": "string",
       "status": "string",
       "currency": "string",
       "subtotal": "number",
       "taxAmount": "number",
       "discountAmount": "number",
       "totalAmount": "number",
       "refundAmount": "number",
       "notes": "string",
       "lineItems": ["object"],
       "billingAddress": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL RECEIPTS
   GET /api/receipts/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, completed|pending|failed|refunded)
   - startDate: string (ISO date, optional)
   - endDate: string (ISO date, optional)
   - customerId: ObjectId (optional)
   - paymentMethod: string (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "receiptNumber": "string",
         "customerId": {
           "firstName": "string",
           "lastName": "string",
           "email": "string"
         },
         "paymentDate": "Date",
         "paymentMethod": "string",
         "transactionId": "string",
         "status": "string",
         "totalAmount": "number",
         "currency": "string",
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalReceipts": "number"
   }

3. GET RECEIPT BY ID
   GET /api/receipts/get/:receiptId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "receiptNumber": "string",
       "organizationId": "ObjectId",
       "customerId": {
         "firstName": "string",
         "lastName": "string",
         "email": "string"
       },
       "orderId": "ObjectId",
       "paymentDate": "Date",
       "paymentMethod": "string",
       "transactionId": "string",
       "status": "string",
       "currency": "string",
       "subtotal": "number",
       "taxAmount": "number",
       "discountAmount": "number",
       "totalAmount": "number",
       "refundAmount": "number",
       "notes": "string",
       "lineItems": ["object"],
       "billingAddress": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE RECEIPT
   PATCH /api/receipts/update/:receiptId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "refundAmount": "number",
     "refundDate": "Date",
     "refundReason": "string"
   }
   
   Response:
   {
     "success": true,
     "message": "Receipt updated successfully",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "refundAmount": "number",
       "refundDate": "Date",
       "refundReason": "string",
       "updatedAt": "Date"
     }
   }

5. DELETE RECEIPT
   DELETE /api/receipts/delete/:receiptId
   
   Response:
   {
     "success": true,
     "message": "Receipt deleted successfully"
   }

6. SEND RECEIPT VIA EMAIL
   POST /api/receipts/:receiptId/send
   
   Request Body:
   {
     "email": "string (required)",
     "subject": "string (optional)",
     "message": "string (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Receipt sent successfully",
     "data": {
       "sentAt": "Date",
       "recipient": "string"
     }
   }

7. GENERATE RECEIPT PDF
   GET /api/receipts/:receiptId/pdf
   
   Response: PDF file download

8. BULK GENERATE RECEIPTS FROM ORDERS
   POST /api/receipts/bulk-generate
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "orderIds": ["ObjectId (required)"],
     "templateId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Receipts generated successfully",
     "data": {
       "generated": "number",
       "failed": "number",
       "receipts": [
         {
           "_id": "ObjectId",
           "receiptNumber": "string",
           "orderId": "ObjectId"
         }
       ]
     }
   }

================================================================================
                                TEMPLATES API
================================================================================

BASE URL: /api/templates

1. CREATE TEMPLATE
   POST /api/templates/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "name": "string (required)",
     "type": "string (required, invoice|receipt)",
     "isDefault": "boolean (default: false)",
     "design": {
       "primaryColor": "string (optional)",
       "secondaryColor": "string (optional)",
       "fontFamily": "string (optional)",
       "logoPosition": "string (optional)",
       "showLogo": "boolean (optional)",
       "showHeader": "boolean (optional)",
       "showFooter": "boolean (optional)"
     },
     "content": {
       "headerText": "string (optional)",
       "footerText": "string (optional)",
       "terms": "string (optional)",
       "notes": "string (optional)"
     },
     "layout": {
       "showTaxBreakdown": "boolean (optional)",
       "showDiscountBreakdown": "boolean (optional)",
       "showShippingInfo": "boolean (optional)",
       "showPaymentInfo": "boolean (optional)"
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Template created successfully",
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "type": "string",
       "isDefault": "boolean",
       "organizationId": "ObjectId",
       "createdAt": "Date"
     }
   }

2. GET ALL TEMPLATES
   GET /api/templates/organization/:organizationId
   
   Query Parameters:
   - type: string (optional, invoice|receipt)
   - isDefault: boolean (optional)
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "name": "string",
         "type": "string",
         "isDefault": "boolean",
         "createdAt": "Date"
       }
     ]
   }

3. GET TEMPLATE BY ID
   GET /api/templates/get/:templateId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "name": "string",
       "type": "string",
       "isDefault": "boolean",
       "design": "object",
       "content": "object",
       "layout": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE TEMPLATE
   PATCH /api/templates/update/:templateId
   
   Request Body: (all fields optional)
   {
     "name": "string",
     "design": "object",
     "content": "object",
     "layout": "object"
   }
   
   Response:
   {
     "success": true,
     "message": "Template updated successfully",
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "design": "object",
       "content": "object",
       "layout": "object",
       "updatedAt": "Date"
     }
   }

5. DELETE TEMPLATE
   DELETE /api/templates/delete/:templateId
   
   Response:
   {
     "success": true,
     "message": "Template deleted successfully"
   }

6. SET TEMPLATE AS DEFAULT
   PATCH /api/templates/:templateId/set-default
   
   Response:
   {
     "success": true,
     "message": "Template set as default successfully",
     "data": {
       "_id": "ObjectId",
       "isDefault": true,
       "updatedAt": "Date"
     }
   }

================================================================================
                                FEEDBACK & SURVEYS API
================================================================================

BASE URL: /api/feedback | /api/suggestions | /api/surveys

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All feedback and survey operations are automatically logged for security and compliance:
- Feedback/suggestion/survey creation, updates, and deletions are logged
- User responses and voting are tracked
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

================================================================================
                                FEEDBACK API
================================================================================

BASE URL: /api/feedback

1. CREATE FEEDBACK
   POST /api/feedback/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "userId": "ObjectId (required)",
     "title": "string (required)",
     "description": "string (required)",
     "category": "string (required, bug_report|feature_request|general|support)",
     "priority": "string (default: 'medium', low|medium|high|critical)",
     "rating": "number (optional, 1-5)",
     "status": "string (default: 'open', open|in_progress|resolved|closed)",
     "metadata": {
       "userAgent": "string (optional)",
       "ipAddress": "string (optional)",
       "pageUrl": "string (optional)"
     }
   }
   
   Response:
   {
     "success": true,
     "message": "Feedback created successfully",
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "category": "string",
       "priority": "string",
       "rating": "number",
       "status": "string",
       "createdAt": "Date"
     }
   }

2. GET ALL FEEDBACK
   GET /api/feedback/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, open|in_progress|resolved|closed)
   - category: string (optional, bug_report|feature_request|general|support)
   - priority: string (optional, low|medium|high|critical)
   - rating: number (optional, 1-5)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "title": "string",
         "category": "string",
         "priority": "string",
         "rating": "number",
         "status": "string",
         "userId": {
           "firstName": "string",
           "lastName": "string",
           "email": "string"
         },
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalFeedback": "number"
   }

3. GET FEEDBACK BY ID
   GET /api/feedback/get/:feedbackId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "userId": {
         "firstName": "string",
         "lastName": "string",
         "email": "string"
       },
       "title": "string",
       "description": "string",
       "category": "string",
       "priority": "string",
       "rating": "number",
       "status": "string",
       "metadata": "object",
       "responses": [
         {
           "_id": "ObjectId",
           "content": "string",
           "type": "string",
           "responderId": "ObjectId",
           "createdAt": "Date"
         }
       ],
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE FEEDBACK
   PATCH /api/feedback/update/:feedbackId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "priority": "string",
     "notes": "string"
   }
   
   Response:
   {
     "success": true,
     "message": "Feedback updated successfully",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "priority": "string",
       "notes": "string",
       "updatedAt": "Date"
     }
   }

5. DELETE FEEDBACK
   DELETE /api/feedback/delete/:feedbackId
   
   Response:
   {
     "success": true,
     "message": "Feedback deleted successfully"
   }

6. ADD RESPONSE TO FEEDBACK
   POST /api/feedback/:feedbackId/respond
   
   Request Body:
   {
     "content": "string (required)",
     "type": "string (required, admin_response|user_response)"
   }
   
   Response:
   {
     "success": true,
     "message": "Response added successfully",
     "data": {
       "_id": "ObjectId",
       "content": "string",
       "type": "string",
       "responderId": "ObjectId",
       "createdAt": "Date"
     }
   }

7. GET FEEDBACK ANALYTICS
   GET /api/feedback/analytics/:organizationId
   
   Response:
   {
     "success": true,
     "data": {
       "totalFeedback": "number",
       "averageRating": "number",
       "statusBreakdown": [
         { "status": "string", "count": "number" }
       ],
       "categoryBreakdown": [
         { "category": "string", "count": "number" }
       ],
       "priorityBreakdown": [
         { "priority": "string", "count": "number" }
       ]
     }
   }

8. BULK UPDATE FEEDBACK
   PATCH /api/feedback/bulk-update
   
   Request Body:
   {
     "feedbackIds": ["ObjectId (required)"],
     "status": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Bulk update completed successfully",
     "data": {
       "updated": "number",
       "failed": "number"
     }
   }

================================================================================
                                SUGGESTIONS API
================================================================================

BASE URL: /api/suggestions

1. CREATE SUGGESTION
   POST /api/suggestions/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "userId": "ObjectId (required)",
     "title": "string (required)",
     "description": "string (required)",
     "category": "string (required)",
     "status": "string (default: 'open', open|under_review|approved|rejected|implemented)",
     "upvotes": "number (default: 0)",
     "downvotes": "number (default: 0)",
     "comments": ["ObjectId (optional)"]
   }
   
   Response:
   {
     "success": true,
     "message": "Suggestion created successfully",
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "category": "string",
       "status": "string",
       "upvotes": "number",
       "downvotes": "number",
       "createdAt": "Date"
     }
   }

2. GET ALL SUGGESTIONS
   GET /api/suggestions/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, open|under_review|approved|rejected|implemented)
   - category: string (optional)
   - sortBy: string (optional, votes|date|title)
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "title": "string",
         "category": "string",
         "status": "string",
         "upvotes": "number",
         "downvotes": "number",
         "userId": {
           "firstName": "string",
           "lastName": "string",
           "email": "string"
         },
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalSuggestions": "number"
   }

3. GET SUGGESTION BY ID
   GET /api/suggestions/get/:suggestionId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "userId": {
         "firstName": "string",
         "lastName": "string",
         "email": "string"
       },
       "title": "string",
       "description": "string",
       "category": "string",
       "status": "string",
       "upvotes": "number",
       "downvotes": "number",
       "comments": [
         {
           "_id": "ObjectId",
           "content": "string",
           "userId": "ObjectId",
           "createdAt": "Date"
         }
       ],
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE SUGGESTION
   PATCH /api/suggestions/update/:suggestionId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "notes": "string"
   }
   
   Response:
   {
     "success": true,
     "message": "Suggestion updated successfully",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "notes": "string",
       "updatedAt": "Date"
     }
   }

5. DELETE SUGGESTION
   DELETE /api/suggestions/delete/:suggestionId
   
   Response:
   {
     "success": true,
     "message": "Suggestion deleted successfully"
   }

6. VOTE ON SUGGESTION
   POST /api/suggestions/:suggestionId/vote
   
   Request Body:
   {
     "voteType": "string (required, upvote|downvote)"
   }
   
   Response:
   {
     "success": true,
     "message": "Vote recorded successfully",
     "data": {
       "_id": "ObjectId",
       "upvotes": "number",
       "downvotes": "number"
     }
   }

7. ADD COMMENT TO SUGGESTION
   POST /api/suggestions/:suggestionId/comment
   
   Request Body:
   {
     "content": "string (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Comment added successfully",
     "data": {
       "_id": "ObjectId",
       "content": "string",
       "userId": "ObjectId",
       "createdAt": "Date"
     }
   }

================================================================================
                                SURVEYS API
================================================================================

BASE URL: /api/surveys

1. CREATE SURVEY
   POST /api/surveys/create
   
   Request Body:
   {
     "organizationId": "ObjectId (required)",
     "userId": "ObjectId (required)",
     "title": "string (required)",
     "description": "string (required)",
     "status": "string (default: 'active', draft|active|paused|completed)",
     "startDate": "Date (required)",
     "endDate": "Date (required)",
     "targetAudience": "string (required, all_customers|specific_customers|all_users)",
     "questions": [
       {
         "question": "string (required)",
         "type": "string (required, rating|text|multiple_choice)",
         "required": "boolean (default: false)",
         "options": ["string (optional, for multiple_choice type)"]
       }
     ]
   }
   
   Response:
   {
     "success": true,
     "message": "Survey created successfully",
     "data": {
       "_id": "ObjectId",
       "title": "string",
       "status": "string",
       "startDate": "Date",
       "endDate": "Date",
       "createdAt": "Date"
     }
   }

2. GET ALL SURVEYS
   GET /api/surveys/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, draft|active|paused|completed)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "title": "string",
         "status": "string",
         "startDate": "Date",
         "endDate": "Date",
         "responses": "number",
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalSurveys": "number"
   }

3. GET SURVEY BY ID
   GET /api/surveys/get/:surveyId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "organizationId": "ObjectId",
       "userId": {
         "firstName": "string",
         "lastName": "string",
         "email": "string"
       },
       "title": "string",
       "description": "string",
       "status": "string",
       "startDate": "Date",
       "endDate": "Date",
       "targetAudience": "string",
       "questions": ["object"],
       "responses": "number",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE SURVEY
   PATCH /api/surveys/update/:surveyId
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "endDate": "Date"
   }
   
   Response:
   {
     "success": true,
     "message": "Survey updated successfully",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "endDate": "Date",
       "updatedAt": "Date"
     }
   }

5. DELETE SURVEY
   DELETE /api/surveys/delete/:surveyId
   
   Response:
   {
     "success": true,
     "message": "Survey deleted successfully"
   }

6. SUBMIT SURVEY RESPONSE
   POST /api/surveys/:surveyId/response
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "answers": [
       {
         "question": "string (required)",
         "answer": "string (required)"
       }
     ]
   }
   
   Response:
   {
     "success": true,
     "message": "Survey response submitted successfully",
     "data": {
       "_id": "ObjectId",
       "surveyId": "ObjectId",
       "userId": "ObjectId",
       "status": "completed",
       "createdAt": "Date"
     }
   }

7. GET SURVEY RESPONSES
   GET /api/surveys/:surveyId/responses
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "surveyId": "ObjectId",
         "userId": {
           "firstName": "string",
           "lastName": "string",
           "email": "string"
         },
         "status": "string",
         "progress": "number",
         "answers": [
           {
             "question": "string",
             "answer": "string"
           }
         ],
         "createdAt": "Date"
       }
     ],
     "currentPage": "number",
     "totalPages": "number",
     "totalResponses": "number"
   }

8. GET SURVEY ANALYTICS
   GET /api/surveys/:surveyId/analytics
   
   Response:
   {
     "success": true,
     "data": {
       "totalResponses": "number",
       "completionRate": "number",
       "averageTime": "string",
       "questionAnalytics": [
         {
           "question": "string",
           "type": "string",
           "averageRating": "number",
           "responses": [
             { "rating": "string", "count": "number" }
           ]
         }
       ]
     }
   }

================================================================================
                                SHIPPING LABELS API
================================================================================

BASE URL: /api/shipping-labels

Authentication: All endpoints require authentication via authMiddleware

AUDIT LOGGING: All shipping label operations are automatically logged for security and compliance:
- Shipping label creation, updates, and deletions are logged with full context
- PDF generation and status updates are tracked
- User information, IP address, and user agent are captured
- Severity levels: info (create/update), warning (delete)
- Organization context is maintained for all audit entries

1. GENERATE SHIPPING LABEL
   POST /api/shipping-labels/generate/:orderId
   
   Request Body:
   {
     "carrier": "string (optional, default: 'USPS', options: USPS|FedEx|UPS|DHL)",
     "serviceType": "string (optional, default: 'Priority', options: Priority|Express|Ground|First Class|Standard)"
   }
   
   Response:
   {
     "success": true,
     "message": "Shipping label generated successfully",
     "data": {
       "_id": "ObjectId",
       "orderId": "ObjectId",
       "organizationId": "ObjectId",
       "storeId": "ObjectId",
       "trackingNumber": "string",
       "carrier": "string",
       "serviceType": "string",
       "status": "string",
       "labelData": {
         "fromAddress": "object",
         "toAddress": "object",
         "packageDetails": "object"
       },
       "createdAt": "Date"
     }
   }

2. GET SHIPPING LABEL BY ORDER
   GET /api/shipping-labels/order/:orderId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "orderId": "ObjectId",
       "trackingNumber": "string",
       "carrier": "string",
       "serviceType": "string",
       "status": "string",
       "labelData": "object",
       "createdAt": "Date"
     }
   }

3. GET ALL SHIPPING LABELS BY ORGANIZATION
   GET /api/shipping-labels/organization/:organizationId
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - status: string (optional, created|printed|shipped|delivered|cancelled)
   - carrier: string (optional, USPS|FedEx|UPS|DHL)
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "orderId": {
           "_id": "ObjectId",
           "number": "string"
         },
         "trackingNumber": "string",
         "carrier": "string",
         "serviceType": "string",
         "status": "string",
         "createdAt": "Date"
       }
     ],
     "pagination": {
       "currentPage": "number",
       "totalPages": "number",
       "totalItems": "number"
     }
   }

4. GET SHIPPING LABEL BY ID
   GET /api/shipping-labels/:labelId
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "orderId": "ObjectId",
       "organizationId": "ObjectId",
       "storeId": "ObjectId",
       "trackingNumber": "string",
       "carrier": "string",
       "serviceType": "string",
       "status": "string",
       "labelData": "object",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

5. GENERATE SHIPPING LABEL PDF
   GET /api/shipping-labels/:labelId/pdf
   
   Response: PDF file download

6. UPDATE SHIPPING LABEL STATUS
   PATCH /api/shipping-labels/:labelId/status
   
   Request Body:
   {
     "status": "string (required, created|printed|shipped|delivered|cancelled)"
   }
   
   Response:
   {
     "success": true,
     "message": "Shipping label status updated",
     "data": {
       "_id": "ObjectId",
       "status": "string",
       "updatedAt": "Date"
     }
   }

7. DELETE SHIPPING LABEL
   DELETE /api/shipping-labels/:labelId
   
   Response:
   {
     "success": true,
     "message": "Shipping label deleted successfully"
   }

8. BULK GENERATE SHIPPING LABELS
   POST /api/shipping-labels/bulk-generate/:organizationId
   
   Request Body:
   {
     "orderIds": ["ObjectId (required)"],
     "carrier": "string (optional, default: 'USPS')",
     "serviceType": "string (optional, default: 'Priority')"
   }
   
   Response:
   {
     "success": true,
     "message": "Bulk shipping label generation completed",
     "data": [
       {
         "orderId": "ObjectId",
         "success": "boolean",
         "labelId": "ObjectId (if successful)",
         "trackingNumber": "string (if successful)",
         "error": "string (if failed)"
       }
     ]
   }

================================================================================
                                ERROR RESPONSES
================================================================================