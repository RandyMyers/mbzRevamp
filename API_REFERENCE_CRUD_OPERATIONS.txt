================================================================================
                    MBZTECH API REFERENCE - CRUD OPERATIONS
================================================================================

This document covers the CRUD (Create, Read, Update, Delete) operations for:
- Categories
- Customers  
- Orders
- Inventory/Products

================================================================================
                                CATEGORIES API
================================================================================

BASE URL: /api/categories

Authentication: All endpoints require authentication via authMiddleware

1. CREATE CATEGORY
   POST /api/categories
   
   Request Body:
   {
     "name": "string (required)",
     "description": "string (optional)",
     "image": {
       "src": "string (optional)",
       "alt": "string (optional)"
     },
     "parent": "ObjectId (optional)",
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)",
     "isActive": "boolean (default: true)",
     "menuOrder": "number (default: 0)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "slug": "string (auto-generated)",
       "description": "string",
       "image": {
         "src": "string",
         "alt": "string"
       },
       "parent": "ObjectId",
       "wooCommerceId": "number (null initially)",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "menuOrder": "number",
       "productCount": "number (default: 0)",
       "syncStatus": "string (synced|pending|failed)",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL CATEGORIES
   GET /api/categories
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - parent: ObjectId or "null" (optional)
   - isActive: boolean (optional)
   - sortBy: string (default: "name")
   - sortOrder: "asc" | "desc" (default: "asc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "name": "string",
         "slug": "string",
         "description": "string",
         "image": {
           "src": "string",
           "alt": "string"
         },
         "parent": {
           "_id": "ObjectId",
           "name": "string",
           "slug": "string"
         },
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "isActive": "boolean",
         "menuOrder": "number",
         "productCount": "number",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET CATEGORY BY ID
   GET /api/categories/:id
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "name": "string",
       "slug": "string",
       "description": "string",
       "image": {
         "src": "string",
         "alt": "string"
       },
       "parent": {
         "_id": "ObjectId",
         "name": "string",
         "slug": "string"
       },
       "wooCommerceId": "number",
       "storeId": {
         "_id": "ObjectId",
         "name": "string",
         "url": "string"
       },
       "organizationId": "ObjectId",
       "isActive": "boolean",
       "menuOrder": "number",
       "productCount": "number",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

4. UPDATE CATEGORY
   PUT /api/categories/:id
   
   Request Body: (all fields optional)
   {
     "name": "string",
     "description": "string",
     "image": {
       "src": "string",
       "alt": "string"
     },
     "parent": "ObjectId",
     "isActive": "boolean",
     "menuOrder": "number"
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated category object
     }
   }

5. DELETE CATEGORY
   DELETE /api/categories/:id
   
   Response:
   {
     "success": true,
     "message": "Category deleted successfully",
     "id": "ObjectId"
   }

6. GET CATEGORIES BY STORE
   GET /api/categories/store/:storeId
   
   Query Parameters:
   - tree: boolean (default: false) - Returns hierarchical tree structure
   
   Response:
   {
     "success": true,
     "data": [
       // Array of categories for the store
     ]
   }

7. SYNC CATEGORIES WITH WOOCOMMERCE
   POST /api/categories/sync/:storeId
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Category sync completed",
     "data": {
       "created": "number",
       "updated": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

================================================================================
                                CUSTOMERS API
================================================================================

BASE URL: /api/customers

Authentication: All endpoints require authentication via authMiddleware

1. CREATE CUSTOMER
   POST /api/customers
   
   Request Body:
   {
     "email": "string (required)",
     "first_name": "string (required)",
     "last_name": "string (required)",
     "username": "string (optional)",
     "role": "string (default: 'customer')",
     "billing": {
       "first_name": "string",
       "last_name": "string",
       "company": "string",
       "address_1": "string",
       "address_2": "string",
       "city": "string",
       "state": "string",
       "postcode": "string",
       "country": "string",
       "email": "string",
       "phone": "string"
     },
     "shipping": {
       "first_name": "string",
       "last_name": "string",
       "company": "string",
       "address_1": "string",
       "address_2": "string",
       "city": "string",
       "state": "string",
       "postcode": "string",
       "country": "string"
     },
     "is_paying_customer": "boolean (default: false)",
     "avatar_url": "string (optional)",
     "meta_data": ["object (optional)"],
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "email": "string",
       "first_name": "string",
       "last_name": "string",
       "username": "string",
       "role": "string",
       "billing": "object",
       "shipping": "object",
       "is_paying_customer": "boolean",
       "avatar_url": "string",
       "meta_data": ["object"],
       "wooCommerceId": "number (null initially)",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL CUSTOMERS
   GET /api/customers
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - role: string (optional)
   - is_paying_customer: boolean (optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "email": "string",
         "first_name": "string",
         "last_name": "string",
         "username": "string",
         "role": "string",
         "billing": "object",
         "shipping": "object",
         "is_paying_customer": "boolean",
         "avatar_url": "string",
         "meta_data": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET CUSTOMER BY ID
   GET /api/customers/:id
   
   Response:
   {
     "success": true,
     "data": {
       // Customer object with populated store information
     }
   }

4. UPDATE CUSTOMER
   PUT /api/customers/:id
   
   Request Body: (all fields optional)
   {
     "email": "string",
     "first_name": "string",
     "last_name": "string",
     "username": "string",
     "role": "string",
     "billing": "object",
     "shipping": "object",
     "is_paying_customer": "boolean",
     "avatar_url": "string",
     "meta_data": ["object"]
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated customer object
     }
   }

5. DELETE CUSTOMER
   DELETE /api/customers/:id
   
   Response:
   {
     "success": true,
     "message": "Customer deleted successfully",
     "id": "ObjectId"
   }

6. GET CUSTOMERS BY STORE
   GET /api/customers/store/:storeId
   
   Query Parameters: (same as GET ALL CUSTOMERS)
   
   Response:
   {
     "success": true,
     "data": [
       // Array of customers for the store
     ],
     "pagination": "object"
   }

7. DELETE ALL CUSTOMERS BY STORE
   DELETE /api/customers/store/:storeId
   
   Request Body:
   {
     "syncToWooCommerce": "boolean (optional, default: false)"
   }
   
   Response:
   {
     "success": true,
     "message": "Successfully deleted X customers from store",
     "data": {
       "deletedCount": "number",
       "totalCustomers": "number",
       "storeId": "string"
     },
     "wooCommerceSync": {
       "total": "number",
       "synced": "number",
       "failed": "number",
       "errors": ["object"]
     }
   }

8. SYNC CUSTOMERS WITH WOOCOMMERCE
   POST /api/customers/sync/:storeId
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Customer sync completed",
     "data": {
       "created": "number",
       "updated": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

================================================================================
                                ORDERS API
================================================================================

BASE URL: /api/orders

Authentication: All endpoints require authentication via authMiddleware

1. CREATE ORDER
   POST /api/orders
   
   Request Body:
   {
     "customer_id": "ObjectId (optional)",
     "status": "string (default: 'pending')",
     "currency": "string (default: 'USD')",
     "prices_include_tax": "boolean (default: false)",
     "discount_total": "string (default: '0')",
     "discount_tax": "string (default: '0')",
     "shipping_total": "string (default: '0')",
     "shipping_tax": "string (default: '0')",
     "cart_tax": "string (default: '0')",
     "total": "string (required)",
     "total_tax": "string (default: '0')",
     "customer_note": "string (optional)",
     "billing": "object (required)",
     "shipping": "object (optional)",
     "payment_method": "string (optional)",
     "payment_method_title": "string (optional)",
     "transaction_id": "string (optional)",
     "customer_ip_address": "string (optional)",
     "customer_user_agent": "string (optional)",
     "created_via": "string (default: 'rest-api')",
     "line_items": [
       {
         "product_id": "ObjectId (required)",
         "name": "string (required)",
         "quantity": "number (required)",
         "tax_class": "string (optional)",
         "subtotal": "string (required)",
         "subtotal_tax": "string (default: '0')",
         "total": "string (required)",
         "total_tax": "string (default: '0')",
         "meta_data": ["object (optional)"]
       }
     ],
     "shipping_lines": [
       {
         "method_title": "string (required)",
         "method_id": "string (required)",
         "total": "string (required)",
         "total_tax": "string (default: '0')",
         "meta_data": ["object (optional)"]
       }
     ],
     "meta_data": ["object (optional)"],
     "order_key": "string (optional)",
     "cart_hash": "string (optional)",
     "version": "string (default: '3.0.0')",
     "storeId": "ObjectId (required)",
     "organizationId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "customer_id": "ObjectId",
       "status": "string",
       "currency": "string",
       "prices_include_tax": "boolean",
       "discount_total": "string",
       "discount_tax": "string",
       "shipping_total": "string",
       "shipping_tax": "string",
       "cart_tax": "string",
       "total": "string",
       "total_tax": "string",
       "customer_note": "string",
       "billing": "object",
       "shipping": "object",
       "payment_method": "string",
       "payment_method_title": "string",
       "transaction_id": "string",
       "customer_ip_address": "string",
       "customer_user_agent": "string",
       "created_via": "string",
       "line_items": ["object"],
       "shipping_lines": ["object"],
       "meta_data": ["object"],
       "order_key": "string",
       "cart_hash": "string",
       "version": "string",
       "wooCommerceId": "number (null initially)",
       "storeId": "ObjectId",
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL ORDERS
   GET /api/orders
   
   Query Parameters:
   - page: number (default: 1)
   - limit: number (default: 10)
   - search: string (optional)
   - storeId: ObjectId (optional)
   - organizationId: ObjectId (optional)
   - status: string (optional)
   - customer_id: ObjectId (optional)
   - date_from: string (ISO date, optional)
   - date_to: string (ISO date, optional)
   - sortBy: string (default: "createdAt")
   - sortOrder: "asc" | "desc" (default: "desc")
   
   Response:
   {
     "success": true,
     "data": [
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "payment_method": "string",
         "payment_method_title": "string",
         "line_items": ["object"],
         "shipping_lines": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "pagination": {
       "page": "number",
       "limit": "number",
       "total": "number",
       "pages": "number"
     }
   }

3. GET ORDER BY ID
   GET /api/orders/:id
   
   Response:
   {
     "success": true,
     "data": {
       // Order object with populated customer and store information
     }
   }

4. UPDATE ORDER
   PUT /api/orders/:id
   
   Request Body: (all fields optional)
   {
     "status": "string",
     "currency": "string",
     "prices_include_tax": "boolean",
     "discount_total": "string",
     "discount_tax": "string",
     "shipping_total": "string",
     "shipping_tax": "string",
     "cart_tax": "string",
     "total": "string",
     "total_tax": "string",
     "customer_note": "string",
     "billing": "object",
     "shipping": "object",
     "payment_method": "string",
     "payment_method_title": "string",
     "transaction_id": "string",
     "line_items": ["object"],
     "shipping_lines": ["object"],
     "meta_data": ["object"]
   }
   
   Response:
   {
     "success": true,
     "data": {
       // Updated order object
     }
   }

5. DELETE ORDER
   DELETE /api/orders/:id
   
   Response:
   {
     "success": true,
     "message": "Order deleted successfully",
     "id": "ObjectId"
   }

6. GET ORDERS BY STORE
   GET /api/orders/store/:storeId
   
   Query Parameters: (same as GET ALL ORDERS)
   
   Response:
   {
     "success": true,
     "data": [
       // Array of orders for the store
     ],
     "pagination": "object"
   }

7. DELETE ALL ORDERS BY STORE
   DELETE /api/orders/store/:storeId
   
   Request Body:
   {
     "syncToWooCommerce": "boolean (optional, default: false)"
   }
   
   Response:
   {
     "success": true,
     "message": "Successfully deleted X orders from store",
     "data": {
       "deletedCount": "number",
       "totalOrders": "number",
       "storeId": "string"
     },
     "wooCommerceSync": {
       "total": "number",
       "synced": "number",
       "failed": "number",
       "errors": ["object"]
     }
   }

8. SYNC ORDERS WITH WOOCOMMERCE
   POST /api/orders/sync/:storeId
   
   Request Body:
   {
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (optional)"
   }
   
   Response:
   {
     "success": true,
     "message": "Order sync completed",
     "data": {
       "created": "number",
       "updated": "number",
       "failed": "number",
       "errors": ["string"]
     }
   }

9. GET ALL ORDERS BY ORGANIZATION
   GET /api/orders/organization/:organizationId
   
   Query Parameters:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "orders": [
       // Array of ALL orders for the organization (including cancelled/refunded)
       {
         "_id": "ObjectId",
         "customer_id": "ObjectId",
         "status": "string",
         "currency": "string",
         "total": "string",
         "billing": "object",
         "shipping": "object",
         "payment_method": "string",
         "payment_method_title": "string",
         "line_items": ["object"],
         "shipping_lines": ["object"],
         "wooCommerceId": "number",
         "storeId": "ObjectId",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ],
     "summary": {
       "totalOrders": "number (valid orders only, excluding cancelled/refunded)",
       "totalRevenue": "number (valid orders only, with currency conversion)",
       "currency": "string (display currency)",
       "totalAllOrders": "number (all orders including cancelled/refunded)",
       "cancelledOrders": "number (count of cancelled orders)",
       "refundedOrders": "number (count of refunded orders)"
     }
   }

================================================================================
                              INVENTORY/PRODUCTS API
================================================================================

BASE URL: /api/inventory

Authentication: All endpoints require authentication via authMiddleware

1. CREATE PRODUCT
   POST /api/inventory/create
   
   Request Body (multipart/form-data):
   {
     "storeId": "ObjectId (required)",
     "name": "string (required)",
     "slug": "string (required)",
     "type": "string (default: 'simple')",
     "status": "string (default: 'publish')",
     "featured": "boolean (default: false)",
     "catalog_visibility": "string (default: 'visible')",
     "description": "string (optional)",
     "short_description": "string (optional)",
     "sku": "string (required)",
     "price": "string (optional)",
     "regular_price": "string (required)",
     "sale_price": "string (optional)",
     "date_on_sale_from": "string (ISO date, optional)",
     "date_on_sale_to": "string (ISO date, optional)",
     "on_sale": "boolean (default: false)",
     "purchasable": "boolean (default: true)",
     "total_sales": "number (default: 0)",
     "virtual": "boolean (default: false)",
     "downloadable": "boolean (default: false)",
     "download_limit": "number (default: -1)",
     "download_expiry": "number (default: -1)",
     "external_url": "string (optional)",
     "button_text": "string (optional)",
     "tax_status": "string (default: 'taxable')",
     "tax_class": "string (optional)",
     "manage_stock": "boolean (default: false)",
     "stock_quantity": "number (optional)",
     "stock_status": "string (default: 'instock')",
     "backorders": "string (default: 'no')",
     "backorders_allowed": "boolean (default: false)",
     "backordered": "boolean (default: false)",
     "sold_individually": "boolean (default: false)",
     "weight": "string (optional)",
     "dimensions": {
       "length": "string (optional)",
       "width": "string (optional)",
       "height": "string (optional)"
     },
     "shipping_required": "boolean (default: true)",
     "shipping_taxable": "boolean (default: true)",
     "shipping_class": "string (optional)",
     "shipping_class_id": "number (default: 0)",
     "reviews_allowed": "boolean (default: true)",
     "average_rating": "string (default: '0.00')",
     "rating_count": "number (default: 0)",
     "related_ids": ["number (optional)"],
     "upsell_ids": ["number (optional)"],
     "cross_sell_ids": ["number (optional)"],
     "parent_id": "number (default: 0)",
     "purchase_note": "string (optional)",
     "categories": [
       {
         "id": "number (WooCommerce ID)",
         "name": "string",
         "slug": "string"
       }
     ],
     "tags": [
       {
         "name": "string"
       }
     ],
     "attributes": ["object (optional)"],
     "default_attributes": ["object (optional)"],
     "variations": ["object (optional)"],
     "grouped_products": ["number (optional)"],
     "menu_order": "number (default: 0)",
     "meta_data": ["object (optional)"],
     "syncToWooCommerce": "boolean (default: false)",
     "userId": "ObjectId (required)",
     "organizationId": "ObjectId (required)",
     "images": "File[] (optional) - Multiple image files"
   }
   
   Response:
   {
     "success": true,
     "data": {
       "_id": "ObjectId",
       "storeId": "ObjectId",
       "name": "string",
       "slug": "string",
       "type": "string",
       "status": "string",
       "featured": "boolean",
       "catalog_visibility": "string",
       "description": "string",
       "short_description": "string",
       "sku": "string",
       "price": "string",
       "regular_price": "string",
       "sale_price": "string",
       "date_on_sale_from": "string",
       "date_on_sale_to": "string",
       "on_sale": "boolean",
       "purchasable": "boolean",
       "total_sales": "number",
       "virtual": "boolean",
       "downloadable": "boolean",
       "download_limit": "number",
       "download_expiry": "number",
       "external_url": "string",
       "button_text": "string",
       "tax_status": "string",
       "tax_class": "string",
       "manage_stock": "boolean",
       "stock_quantity": "number",
       "stock_status": "string",
       "backorders": "string",
       "backorders_allowed": "boolean",
       "backordered": "boolean",
       "sold_individually": "boolean",
       "weight": "string",
       "dimensions": "object",
       "shipping_required": "boolean",
       "shipping_taxable": "boolean",
       "shipping_class": "string",
       "shipping_class_id": "number",
       "reviews_allowed": "boolean",
       "average_rating": "string",
       "rating_count": "number",
       "related_ids": ["number"],
       "upsell_ids": ["number"],
       "cross_sell_ids": ["number"],
       "parent_id": "number",
       "purchase_note": "string",
       "categories": ["object"],
       "tags": ["object"],
       "images": [
         {
           "id": "number",
           "date_created": "string",
           "src": "string (Cloudinary URL)",
           "alt": "string"
         }
       ],
       "attributes": ["object"],
       "default_attributes": ["object"],
       "variations": ["object"],
       "grouped_products": ["number"],
       "menu_order": "number",
       "meta_data": ["object"],
       "wooCommerceId": "number (null initially)",
       "organizationId": "ObjectId",
       "syncStatus": "string",
       "lastSyncedAt": "Date",
       "createdAt": "Date",
       "updatedAt": "Date"
     }
   }

2. GET ALL PRODUCTS
   GET /api/inventory/all
   
   Response:
   {
     "success": true,
     "products": [
       {
         "_id": "ObjectId",
         "storeId": "ObjectId",
         "name": "string",
         "slug": "string",
         "type": "string",
         "status": "string",
         "featured": "boolean",
         "sku": "string",
         "price": "string",
         "regular_price": "string",
         "sale_price": "string",
         "on_sale": "boolean",
         "manage_stock": "boolean",
         "stock_quantity": "number",
         "stock_status": "string",
         "weight": "string",
         "dimensions": "object",
         "categories": ["object"],
         "tags": ["object"],
         "images": ["object"],
         "wooCommerceId": "number",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

3. GET PRODUCTS BY ORGANIZATION
   GET /api/inventory/organization/:organizationId
   
   Response:
   {
     "success": true,
     "products": [
       {
         "_id": "ObjectId",
         "storeId": "ObjectId",
         "name": "string",
         "slug": "string",
         "type": "string",
         "status": "string",
         "featured": "boolean",
         "sku": "string",
         "price": "string",
         "regular_price": "string",
         "sale_price": "string",
         "on_sale": "boolean",
         "manage_stock": "boolean",
         "stock_quantity": "number",
         "stock_status": "string",
         "weight": "string",
         "dimensions": "object",
         "categories": ["object"],
         "tags": ["object"],
         "images": ["object"],
         "wooCommerceId": "number",
         "organizationId": "ObjectId",
         "syncStatus": "string",
         "lastSyncedAt": "Date",
         "createdAt": "Date",
         "updatedAt": "Date"
       }
     ]
   }

4. GET PRODUCT BY ID
   GET /api/inventory/:productId
   
   Response:
   {
     "success": true,
     "product": {
       // Product object with populated store information
     }
   }

5. UPDATE PRODUCT
   PATCH /api/inventory/:productId
   
   Request Body: (all fields optional, same structure as CREATE)
   
   Response:
   {
     "success": true,
     "product": {
       // Updated product object
     }
   }

6. DELETE PRODUCT
   DELETE /api/inventory/:productId
   
   Response:
   {
     "success": true,
     "message": "Product deleted successfully",
     "id": "ObjectId"
   }

7. DELETE ALL PRODUCTS BY STORE
   DELETE /api/inventory/store/:storeId
   
   Response:
   {
     "success": true,
     "message": "All products for store deleted successfully"
   }

8. SYNC PRODUCTS WITH WOOCOMMERCE
   POST /api/inventory/woocommerce/sync-products/:storeId/:organizationId
   
   Request Body:
   {
     "userId": "ObjectId (required)"
   }
   
   Response:
   {
     "success": true,
     "message": "Product synchronization started in the background"
   }

9. SYNC SINGLE PRODUCT TO WOOCOMMERCE
   POST /api/inventory/woocommerce/sync/:productId
   
   Response:
   {
     "success": true,
     "message": "Product sync completed"
   }

10. RETRY PRODUCT WOOCOMMERCE SYNC
    POST /api/inventory/woocommerce/retry-sync/:productId
    
    Response:
    {
      "success": true,
      "message": "Product sync retry completed"
    }

11. GET PRODUCT METRICS
    GET /api/inventory/metrics/:organizationId
    
    Query Parameters:
    - storeId: ObjectId (optional)
    - date_from: string (ISO date, optional)
    - date_to: string (ISO date, optional)
    
    Response:
    {
      "success": true,
      "data": {
        "totalProducts": "number",
        "activeProducts": "number",
        "draftProducts": "number",
        "featuredProducts": "number",
        "onSaleProducts": "number",
        "outOfStockProducts": "number",
        "lowStockProducts": "number",
        "totalCategories": "number",
        "totalTags": "number",
        "averagePrice": "number",
        "totalValue": "number",
        "syncStatus": {
          "synced": "number",
          "pending": "number",
          "failed": "number"
        }
      }
    }

12. INVENTORY METRICS ENDPOINTS
   
   All metrics endpoints require authentication and return count/value data for the specified organization.
   
   a) GET TOTAL PRODUCTS COUNT
      GET /api/inventory/metrics/total-products/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   b) GET IN-STOCK ITEMS COUNT
      GET /api/inventory/metrics/in-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   c) GET LOW-STOCK ITEMS COUNT
      GET /api/inventory/metrics/low-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   d) GET OUT-OF-STOCK ITEMS COUNT
      GET /api/inventory/metrics/out-of-stock/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   e) GET CATEGORY COUNT
      GET /api/inventory/metrics/category-count/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   f) GET STORE COUNT
      GET /api/inventory/metrics/store-count/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   g) GET TOTAL INVENTORY VALUE
      GET /api/inventory/metrics/total-value/:organizationId
      
      Response:
      {
        "success": true,
        "totalValue": "number"
      }
   
   h) GET AVERAGE PRODUCT PRICE
      GET /api/inventory/metrics/avg-price/:organizationId
      
      Response:
      {
        "success": true,
        "avgPrice": "number"
      }
   
   i) GET ON-SALE PRODUCTS COUNT
      GET /api/inventory/metrics/on-sale/:organizationId
      
      Response:
      {
        "success": true,
        "count": "number"
      }
   
   j) GET AVERAGE PRODUCT RATING
      GET /api/inventory/metrics/avg-rating/:organizationId
      
      Response:
      {
        "success": true,
        "avgRating": "number"
      }

================================================================================
                              STORE OVERVIEW API
================================================================================

BASE URL: /api/store-overview

Authentication: All endpoints require authentication via authMiddleware

1. GET STORE STATS
   GET /api/store-overview/stats/:organizationId
   
   Query Parameters:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": {
       "storeCount": { "current": number, "previous": 0, "growth": 0 },
       "activeStores": { "current": number, "previous": 0, "growth": 0 },
       "totalRevenue": { "current": number, "previous": 0, "growth": 0, "currency": string },
       "totalOrders": { "current": number, "previous": 0, "growth": 0 },
       "totalCustomers": { "current": number, "previous": 0, "growth": 0 },
       "totalProducts": { "current": number, "previous": 0, "growth": 0 }
     }
   }
   
   Note: This endpoint now returns all-time statistics (no time-based filtering).
   Previous period and growth calculations are set to 0 as data represents all-time totals.

2. GET STORE ALERTS
   GET /api/store-overview/alerts/:organizationId
   
   Response:
   {
     "success": true,
     "data": [
       {
         "type": "string (sync_warning|sync_error|low_stock|inactive_store)",
         "severity": "string (low|medium|high)",
         "message": "string",
         "storeId": "ObjectId (optional)",
         "storeName": "string (optional)",
         "lastSyncDate": "Date (optional)",
         "productCount": "number (optional)",
         "products": ["object (optional)"],
         "errorCount": "number (optional)"
       }
     ]
   }

3. GET STORE PERFORMANCE COMPARISON (Time Series Line Chart Data)
   GET /api/store-overview/performance/:organizationId
   
   Query Parameters:
   - timeRange: string (7d, 30d, 90d, 12m, default: 30d) - Time range for performance data
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
   Response:
   {
     "success": true,
     "data": [
       {
         "date": "string (YYYY-MM-DD)",
         "Store Name 1": "number (sales amount)",
         "Store Name 2": "number (sales amount)",
         "Store Name 3": "number (sales amount)"
         // ... one property per store
       }
     ],
     "summary": {
       "totalStores": "number",
       "dateRange": {
         "start": "string (YYYY-MM-DD)",
         "end": "string (YYYY-MM-DD)"
       },
       "stores": [
         {
           "storeId": "ObjectId",
           "storeName": "string",
           "totalSales": "number (rounded to 2 decimal places)",
           "totalOrders": "number",
           "platformType": "string",
           "isActive": "boolean"
         }
       ],
       "currency": "string"
     }
   }

4. GET STORE REVENUE TRENDS
   GET /api/store-overview/revenue-trends/:organizationId
   
   Query Parameters:
   - timeRange: string (7d, 30d, 90d, 12m, default: 30d)
   - userId: ObjectId (optional)
   - displayCurrency: string (optional)
   
   Response:
   {
     "success": true,
     "data": {
       "daily": [
         {
           "date": "string (YYYY-MM-DD)",
           "revenue": "number",
           "orders": "number"
         }
       ],
       "monthly": [
         {
           "month": "string (YYYY-MM)",
           "revenue": "number",
           "orders": "number"
         }
       ]
     }
   }

================================================================================
                              CURRENCY CONVERSION & EXCHANGE RATES
================================================================================

The application supports multi-currency operations with automatic currency conversion
using the Exchange Rate API (exchangerate-api.com).

1. EXCHANGE RATE API INTEGRATION
   
   The system automatically fetches and caches exchange rates from the Exchange Rate API.
   Rates are cached for 1 hour by default and updated via background cron jobs.
   
   Environment Variables Required:
   - EXCHANGE_RATE_API_KEY: Your API key from exchangerate-api.com
   - EXCHANGE_RATE_API_URL: API base URL (default: https://v6.exchangerate-api.com/v6)
   - EXCHANGE_RATE_CACHE_TTL: Cache duration in seconds (default: 3600)
   
2. CURRENCY CONVERSION IN STATS
   
   All revenue calculations automatically convert multi-currency orders to the user's
   preferred display currency using the following fallback chain:
   
   1. Organization-specific exchange rates (if configured)
   2. Global/system exchange rates (cached from API)
   3. Fresh API rates (if cache is expired)
   4. Fallback to expired cached rates (if API is unavailable)
   
3. SUPPORTED CURRENCIES
   
   The system supports all currencies available through the Exchange Rate API,
   including but not limited to: USD, EUR, GBP, JPY, CAD, AUD, CHF, CNY, etc.
   
4. CURRENCY PREFERENCES
   
   Users can set their preferred display currency, which is used for:
   - Revenue calculations in dashboard stats
   - Order totals display
   - Financial reporting
   - Store performance metrics
   - Analytics revenue calculations
   - Product performance metrics
   - Customer lifetime value calculations

================================================================================
                              ANALYTICS API UPDATES
================================================================================

The Analytics API has been enhanced to support multi-currency operations and provide
accurate revenue calculations across all analytics endpoints.

1. UPDATED ENDPOINTS WITH CURRENCY SUPPORT
   
   The following analytics endpoints now accept currency parameters:
   - GET /api/analytics/total-revenue
   - GET /api/analytics/average-order-value
   - GET /api/analytics/lifetime-value
   - GET /api/analytics/product-performance
   - GET /api/analytics/regional-sales
   - GET /api/advanced-analytics/sales/total-revenue
   - GET /api/advanced-analytics/sales/revenue-by-product
   - GET /api/advanced-analytics/products/best-sellers
   
2. NEW QUERY PARAMETERS
   
   All revenue-related analytics endpoints now accept:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
3. ENHANCED RESPONSE FORMAT
   
   Revenue-related analytics responses now include:
   - currency: string - The display currency used for calculations
   - currencyBreakdown: object - Breakdown of revenue by original currency
   - originalCurrency: string - Original currency of the data
   - convertedCurrency: string - Currency the data was converted to
   
4. CONSISTENT ORDER FILTERING
   
   All analytics endpoints now consistently exclude cancelled and refunded orders
   from revenue calculations while maintaining accurate order counts where appropriate.

================================================================================
                                ERROR RESPONSES
================================================================================

All endpoints may return the following error responses:

1. Authentication Error (401):
   {
     "success": false,
     "message": "Access denied. No token provided."
   }

2. Validation Error (400):
   {
     "success": false,
     "message": "Validation failed",
     "errors": [
       {
         "field": "string",
         "message": "string"
       }
     ]
   }

3. Not Found Error (404):
   {
     "success": false,
     "message": "Resource not found"
   }

4. Server Error (500):
   {
     "success": false,
     "message": "Internal server error",
     "error": "string"
   }

================================================================================
                                NOTES
================================================================================

1. All timestamps are in ISO 8601 format
2. ObjectId fields are MongoDB ObjectId strings
3. File uploads use multipart/form-data
4. Images are automatically uploaded to Cloudinary
5. WooCommerce sync is optional and requires valid store credentials
6. Pagination is included in list endpoints
7. Search functionality supports text search across relevant fields
8. All endpoints require valid authentication token
9. Organization and store context is maintained throughout
10. Audit logging is automatically performed for all operations
11. Currency conversion is automatic for multi-currency orders
12. Store overview stats show all-time data (no time-based filtering)
13. Orders API returns all orders but stats exclude cancelled/refunded orders
14. Exchange Rate API integration provides real-time currency conversion
15. Background services automatically sync exchange rates

================================================================================
                                VERSION
================================================================================

API Version: 1.2
Last Updated: 2024
Documentation Version: 1.2

Recent Updates:
- Added multi-currency support with Exchange Rate API integration
- Updated Store Overview stats to show all-time data
- Enhanced Orders API with comprehensive order breakdown
- Added currency conversion for accurate revenue calculations
- Implemented background exchange rate synchronization
- Updated Analytics controllers to support multi-currency operations
- Enhanced Analytics page with currency-aware revenue calculations
- Added currency parameters to all revenue-related analytics endpoints

================================================================================ 
================================================================================ 
2. CURRENCY CONVERSION IN STATS
   
   All revenue calculations automatically convert multi-currency orders to the user's
   preferred display currency using the following fallback chain:
   
   1. Organization-specific exchange rates (if configured)
   2. Global/system exchange rates (cached from API)
   3. Fresh API rates (if cache is expired)
   4. Fallback to expired cached rates (if API is unavailable)
   
3. SUPPORTED CURRENCIES
   
   The system supports all currencies available through the Exchange Rate API,
   including but not limited to: USD, EUR, GBP, JPY, CAD, AUD, CHF, CNY, etc.
   
4. CURRENCY PREFERENCES
   
   Users can set their preferred display currency, which is used for:
   - Revenue calculations in dashboard stats
   - Order totals display
   - Financial reporting
   - Store performance metrics
   - Analytics revenue calculations
   - Product performance metrics
   - Customer lifetime value calculations

================================================================================
                              ANALYTICS API UPDATES
================================================================================

The Analytics API has been enhanced to support multi-currency operations and provide
accurate revenue calculations across all analytics endpoints.

1. UPDATED ENDPOINTS WITH CURRENCY SUPPORT
   
   The following analytics endpoints now accept currency parameters:
   - GET /api/analytics/total-revenue
   - GET /api/analytics/average-order-value
   - GET /api/analytics/lifetime-value
   - GET /api/analytics/product-performance
   - GET /api/analytics/regional-sales
   - GET /api/advanced-analytics/sales/total-revenue
   - GET /api/advanced-analytics/sales/revenue-by-product
   - GET /api/advanced-analytics/products/best-sellers
   
2. NEW QUERY PARAMETERS
   
   All revenue-related analytics endpoints now accept:
   - userId: ObjectId (optional) - User ID for currency preferences
   - displayCurrency: string (optional) - Preferred display currency
   
3. ENHANCED RESPONSE FORMAT
   
   Revenue-related analytics responses now include:
   - currency: string - The display currency used for calculations
   - currencyBreakdown: object - Breakdown of revenue by original currency
   - originalCurrency: string - Original currency of the data
   - convertedCurrency: string - Currency the data was converted to
   
4. CONSISTENT ORDER FILTERING
   
   All analytics endpoints now consistently exclude cancelled and refunded orders
   from revenue calculations while maintaining accurate order counts where appropriate.

================================================================================
                                ERROR RESPONSES
================================================================================

All endpoints may return the following error responses:

1. Authentication Error (401):
   {
     "success": false,
     "message": "Access denied. No token provided."
   }

2. Validation Error (400):
   {
     "success": false,
     "message": "Validation failed",
     "errors": [
       {
         "field": "string",
         "message": "string"
       }
     ]
   }

3. Not Found Error (404):
   {
     "success": false,
     "message": "Resource not found"
   }

4. Server Error (500):
   {
     "success": false,
     "message": "Internal server error",
     "error": "string"
   }

================================================================================
                                NOTES
================================================================================

1. All timestamps are in ISO 8601 format
2. ObjectId fields are MongoDB ObjectId strings
3. File uploads use multipart/form-data
4. Images are automatically uploaded to Cloudinary
5. WooCommerce sync is optional and requires valid store credentials
6. Pagination is included in list endpoints
7. Search functionality supports text search across relevant fields
8. All endpoints require valid authentication token
9. Organization and store context is maintained throughout
10. Audit logging is automatically performed for all operations
11. Currency conversion is automatic for multi-currency orders
12. Store overview stats show all-time data (no time-based filtering)
13. Orders API returns all orders but stats exclude cancelled/refunded orders
14. Exchange Rate API integration provides real-time currency conversion
15. Background services automatically sync exchange rates

================================================================================
                                VERSION
================================================================================

API Version: 1.2
Last Updated: 2024
Documentation Version: 1.2

Recent Updates:
- Added multi-currency support with Exchange Rate API integration
- Updated Store Overview stats to show all-time data
- Enhanced Orders API with comprehensive order breakdown
- Added currency conversion for accurate revenue calculations
- Implemented background exchange rate synchronization
- Updated Analytics controllers to support multi-currency operations
- Enhanced Analytics page with currency-aware revenue calculations
- Added currency parameters to all revenue-related analytics endpoints

================================================================================ 
================================================================================ 